Sources\L3G.o:     file format elf32-littlearmSources\L3G.oarchitecture: arm, flags 0x00000011:HAS_RELOC, HAS_SYMSstart address 0x00000000private flags = 5000000: [Version5 EABI]Sections:Idx Name          Size      VMA       LMA       File off  Algn  0 .text         00000000  00000000  00000000  00000034  2**1                  CONTENTS, ALLOC, LOAD, READONLY, CODE  1 .data         00000000  00000000  00000000  00000034  2**0                  CONTENTS, ALLOC, LOAD, DATA  2 .bss          00000000  00000000  00000000  00000034  2**0                  ALLOC  3 .bss.gyro     0000001c  00000000  00000000  00000034  2**2                  ALLOC  4 .bss.vX       00000190  00000000  00000000  00000034  2**2                  ALLOC  5 .bss.vY       00000190  00000000  00000000  00000034  2**2                  ALLOC  6 .bss.vZ       00000190  00000000  00000000  00000034  2**2                  ALLOC  7 .bss.Offset   00000004  00000000  00000000  00000034  2**2                  ALLOC  8 .bss.res      00000001  00000000  00000000  00000034  2**0                  ALLOC  9 .text.L3Ginit 00000044  00000000  00000000  00000034  2**2                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE 10 .text.L3GenableDefault 000000f0  00000000  00000000  00000078  2**2                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE 11 .text.L3GwriteReg 0000004c  00000000  00000000  00000168  2**2                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE 12 .text.L3GreadReg 00000054  00000000  00000000  000001b4  2**2                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE 13 .text.L3Greadxyz 0000012c  00000000  00000000  00000208  2**2                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE 14 .text.L3Gread 000001ac  00000000  00000000  00000334  2**2                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE 15 .rodata.L3Gread 00000118  00000000  00000000  000004e0  2**2                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA 16 .text.L3GgetDegree 000000d8  00000000  00000000  000005f8  2**2                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE 17 .rodata.L3GgetDegree 0000008c  00000000  00000000  000006d0  2**2                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA 18 .text.L3GreadTemp 00000018  00000000  00000000  0000075c  2**2                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE 19 .text.calculateOffset 000001a8  00000000  00000000  00000774  2**2                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE 20 .text.cmpfunc 00000028  00000000  00000000  0000091c  2**2                  CONTENTS, ALLOC, LOAD, READONLY, CODE 21 .text.refreshMovingOffset 00000200  00000000  00000000  00000944  2**2                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE 22 .rodata.refreshMovingOffset 0000008c  00000000  00000000  00000b44  2**2                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA 23 .text.L3GSetAngel 0000005c  00000000  00000000  00000bd0  2**2                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE 24 .rodata.L3GSetAngel 0000008c  00000000  00000000  00000c2c  2**2                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA 25 .text.combineAccel 00000228  00000000  00000000  00000cb8  2**3                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE 26 .bss.accelCounter.7818 00000001  00000000  00000000  00000ee0  2**0                  ALLOC 27 .bss.iX.7790  00000002  00000000  00000000  00000ee0  2**1                  ALLOC 28 .bss.iY.7791  00000002  00000000  00000000  00000ee0  2**1                  ALLOC 29 .bss.iZ.7792  00000002  00000000  00000000  00000ee0  2**1                  ALLOC 30 .debug_info   00000718  00000000  00000000  00000ee0  2**0                  CONTENTS, RELOC, READONLY, DEBUGGING 31 .debug_abbrev 000001cc  00000000  00000000  000015f8  2**0                  CONTENTS, READONLY, DEBUGGING 32 .debug_loc    000002b4  00000000  00000000  000017c4  2**0                  CONTENTS, RELOC, READONLY, DEBUGGING 33 .debug_aranges 00000080  00000000  00000000  00001a78  2**0                  CONTENTS, RELOC, READONLY, DEBUGGING 34 .debug_macinfo 00039121  00000000  00000000  00001af8  2**0                  CONTENTS, READONLY, DEBUGGING 35 .debug_line   00000696  00000000  00000000  0003ac19  2**0                  CONTENTS, RELOC, READONLY, DEBUGGING 36 .debug_str    000004ed  00000000  00000000  0003b2af  2**0                  CONTENTS, READONLY, DEBUGGING 37 .comment      0000007a  00000000  00000000  0003b79c  2**0                  CONTENTS, READONLY 38 .ARM.attributes 00000031  00000000  00000000  0003b816  2**0                  CONTENTS, READONLY 39 .debug_frame  000001a8  00000000  00000000  0003b848  2**2                  CONTENTS, RELOC, READONLY, DEBUGGINGSYMBOL TABLE:00000000 l    df *ABS*	00000000 L3G.c00000000 l    d  .text	00000000 .text00000000 l    d  .data	00000000 .data00000000 l    d  .bss	00000000 .bss00000000 l    d  .bss.gyro	00000000 .bss.gyro00000000 l     O .bss.gyro	0000001c gyro00000000 l    d  .bss.vX	00000000 .bss.vX00000000 l     O .bss.vX	00000190 vX00000000 l    d  .bss.vY	00000000 .bss.vY00000000 l     O .bss.vY	00000190 vY00000000 l    d  .bss.vZ	00000000 .bss.vZ00000000 l     O .bss.vZ	00000190 vZ00000000 l    d  .bss.Offset	00000000 .bss.Offset00000000 l     O .bss.Offset	00000003 Offset00000000 l    d  .bss.res	00000000 .bss.res00000000 l     O .bss.res	00000001 res00000000 l    d  .text.L3Ginit	00000000 .text.L3Ginit00000000 l    d  .text.L3GenableDefault	00000000 .text.L3GenableDefault00000000 l    d  .text.L3GwriteReg	00000000 .text.L3GwriteReg00000000 l    d  .text.L3GreadReg	00000000 .text.L3GreadReg00000000 l    d  .text.L3Greadxyz	00000000 .text.L3Greadxyz00000000 l    d  .text.L3Gread	00000000 .text.L3Gread00000000 l    d  .rodata.L3Gread	00000000 .rodata.L3Gread00000000 l    d  .text.L3GgetDegree	00000000 .text.L3GgetDegree00000000 l    d  .rodata.L3GgetDegree	00000000 .rodata.L3GgetDegree00000000 l    d  .text.L3GreadTemp	00000000 .text.L3GreadTemp00000000 l    d  .text.calculateOffset	00000000 .text.calculateOffset00000000 l    d  .text.cmpfunc	00000000 .text.cmpfunc00000000 l    d  .text.refreshMovingOffset	00000000 .text.refreshMovingOffset00000000 l    d  .rodata.refreshMovingOffset	00000000 .rodata.refreshMovingOffset00000000 l     O .bss.iX.7790	00000002 iX.779000000000 l     O .bss.iY.7791	00000002 iY.779100000000 l     O .bss.iZ.7792	00000002 iZ.779200000000 l    d  .text.L3GSetAngel	00000000 .text.L3GSetAngel00000000 l    d  .rodata.L3GSetAngel	00000000 .rodata.L3GSetAngel00000000 l    d  .text.combineAccel	00000000 .text.combineAccel00000000 l     O .bss.accelCounter.7818	00000001 accelCounter.781800000000 l    d  .bss.accelCounter.7818	00000000 .bss.accelCounter.781800000000 l    d  .bss.iX.7790	00000000 .bss.iX.779000000000 l    d  .bss.iY.7791	00000000 .bss.iY.779100000000 l    d  .bss.iZ.7792	00000000 .bss.iZ.779200000000 l    d  .debug_info	00000000 .debug_info00000000 l    d  .debug_abbrev	00000000 .debug_abbrev00000000 l    d  .debug_loc	00000000 .debug_loc00000000 l    d  .debug_aranges	00000000 .debug_aranges00000000 l    d  .debug_macinfo	00000000 .debug_macinfo00000000 l    d  .debug_line	00000000 .debug_line00000000 l    d  .debug_str	00000000 .debug_str00000000 l    d  .debug_frame	00000000 .debug_frame00000000 l    d  .comment	00000000 .comment00000000 l    d  .ARM.attributes	00000000 .ARM.attributes00000001       O *COM*	00000001 device00000000 g     F .text.L3Ginit	00000044 L3Ginit00000000 g     F .text.L3GenableDefault	000000f0 L3GenableDefault00000000 g     F .text.L3GwriteReg	0000004c L3GwriteReg00000000         *UND*	00000000 GI2C1_WriteAddress00000000 g     F .text.L3GreadReg	00000054 L3GreadReg00000000         *UND*	00000000 GI2C1_ReadAddress00000000         *UND*	00000000 __aeabi_idiv00000000 g     F .text.L3Greadxyz	0000012c L3Greadxyz00000000 g     F .text.combineAccel	00000224 combineAccel00000000 g     F .text.L3Gread	000001ac L3Gread00000000 g     F .text.L3GgetDegree	000000d8 L3GgetDegree00000000 g     F .text.L3GreadTemp	00000018 L3GreadTemp00000000 g     F .text.calculateOffset	000001a8 calculateOffset00000000         *UND*	00000000 vTaskDelay00000000         *UND*	00000000 qsort00000000 g     F .text.cmpfunc	00000026 cmpfunc00000000 g     F .text.refreshMovingOffset	00000200 refreshMovingOffset00000000 g     F .text.L3GSetAngel	0000005c L3GSetAngel00000000         *UND*	00000000 __aeabi_i2f00000000         *UND*	00000000 __aeabi_f2d00000000         *UND*	00000000 __aeabi_dmul00000000         *UND*	00000000 __aeabi_ddiv00000000         *UND*	00000000 __aeabi_d2f00000000         *UND*	00000000 __aeabi_fmul00000000         *UND*	00000000 __aeabi_fadd00000000         *UND*	00000000 __aeabi_i2d00000000         *UND*	00000000 __aeabi_f2iz00000000         *UND*	00000000 __aeabi_dadd00000000         *UND*	00000000 __aeabi_d2iz00000000         *UND*	00000000 MMA1_GetXmg00000000         *UND*	00000000 MMA1_GetYmg00000000         *UND*	00000000 MMA1_GetZmg00000000         *UND*	00000000 sqrt00000000         *UND*	00000000 atanDisassembly of section .text.L3Ginit:00000000 <L3Ginit>:static int8_t Offset[3];static uint8_t res;// Public Methods //////////////////////////////////////////////////////////////void L3Ginit(void){   0:	b580      	push	{r7, lr}   2:	af00      	add	r7, sp, #0	device = device_D20;   4:	4b0d      	ldr	r3, [pc, #52]	; (3c <L3Ginit+0x3c>)   6:	2201      	movs	r2, #1   8:	701a      	strb	r2, [r3, #0]	gyro.address = D20_SA0_HIGH_ADDRESS;   a:	4b0d      	ldr	r3, [pc, #52]	; (40 <L3Ginit+0x40>)   c:	226b      	movs	r2, #107	; 0x6b   e:	701a      	strb	r2, [r3, #0]	L3GenableDefault();  10:	f7ff fffe 	bl	0 <L3Ginit>			10: R_ARM_THM_CALL	L3GenableDefault	gyro.vX = 0;  14:	4b0a      	ldr	r3, [pc, #40]	; (40 <L3Ginit+0x40>)  16:	2200      	movs	r2, #0  18:	805a      	strh	r2, [r3, #2]	gyro.vY = 0;  1a:	4b09      	ldr	r3, [pc, #36]	; (40 <L3Ginit+0x40>)  1c:	2200      	movs	r2, #0  1e:	809a      	strh	r2, [r3, #4]	gyro.vZ = 0;  20:	4b07      	ldr	r3, [pc, #28]	; (40 <L3Ginit+0x40>)  22:	2200      	movs	r2, #0  24:	80da      	strh	r2, [r3, #6]	gyro.x = 0;  26:	4b06      	ldr	r3, [pc, #24]	; (40 <L3Ginit+0x40>)  28:	2200      	movs	r2, #0  2a:	609a      	str	r2, [r3, #8]	gyro.y = 0;  2c:	4b04      	ldr	r3, [pc, #16]	; (40 <L3Ginit+0x40>)  2e:	2200      	movs	r2, #0  30:	60da      	str	r2, [r3, #12]	gyro.z = 0;  32:	4b03      	ldr	r3, [pc, #12]	; (40 <L3Ginit+0x40>)  34:	2200      	movs	r2, #0  36:	611a      	str	r2, [r3, #16]}  38:	46bd      	mov	sp, r7  3a:	bd80      	pop	{r7, pc}	...			3c: R_ARM_ABS32	device			40: R_ARM_ABS32	.bss.gyroDisassembly of section .text.L3GenableDefault:00000000 <L3GenableDefault>:  for L3GD20H and 190 Hz for L3GD20.)Note that this function will also reset other settings controlled bythe registers it writes to.*/uint8_t L3GenableDefault(void){   0:	b580      	push	{r7, lr}   2:	af00      	add	r7, sp, #0  if (device == device_D20H)   4:	4b38      	ldr	r3, [pc, #224]	; (e8 <L3GenableDefault+0xe8>)   6:	781b      	ldrb	r3, [r3, #0]   8:	2b02      	cmp	r3, #2   a:	d10e      	bne.n	2a <L3GenableDefault+0x2a>  {    // 0x00 = 0b00000000    // Low_ODR = 0 (low speed ODR disabled)    res = L3GwriteReg(LOW_ODR, 0x00);   c:	2039      	movs	r0, #57	; 0x39   e:	2100      	movs	r1, #0  10:	f7ff fffe 	bl	0 <L3GenableDefault>			10: R_ARM_THM_CALL	L3GwriteReg  14:	1c03      	adds	r3, r0, #0  16:	1c1a      	adds	r2, r3, #0  18:	4b34      	ldr	r3, [pc, #208]	; (ec <L3GenableDefault+0xec>)  1a:	701a      	strb	r2, [r3, #0]    if(res != ERR_OK){  1c:	4b33      	ldr	r3, [pc, #204]	; (ec <L3GenableDefault+0xec>)  1e:	781b      	ldrb	r3, [r3, #0]  20:	2b00      	cmp	r3, #0  22:	d002      	beq.n	2a <L3GenableDefault+0x2a>    	return res;  24:	4b31      	ldr	r3, [pc, #196]	; (ec <L3GenableDefault+0xec>)  26:	781b      	ldrb	r3, [r3, #0]  28:	e05a      	b.n	e0 <L3GenableDefault+0xe0>  #if(FULLSCALE == 250)  // 0x00 = 0b00000000  // FS = 00 (+/- 250 dps full scale)  res = L3GwriteReg(CTRL_REG4, 0x00);  2a:	2023      	movs	r0, #35	; 0x23  2c:	2100      	movs	r1, #0  2e:	f7ff fffe 	bl	0 <L3GenableDefault>			2e: R_ARM_THM_CALL	L3GwriteReg  32:	1c03      	adds	r3, r0, #0  34:	1c1a      	adds	r2, r3, #0  36:	4b2d      	ldr	r3, [pc, #180]	; (ec <L3GenableDefault+0xec>)  38:	701a      	strb	r2, [r3, #0]  if(res != ERR_OK){  3a:	4b2c      	ldr	r3, [pc, #176]	; (ec <L3GenableDefault+0xec>)  3c:	781b      	ldrb	r3, [r3, #0]  3e:	2b00      	cmp	r3, #0  40:	d002      	beq.n	48 <L3GenableDefault+0x48>  	return res;  42:	4b2a      	ldr	r3, [pc, #168]	; (ec <L3GenableDefault+0xec>)  44:	781b      	ldrb	r3, [r3, #0]  46:	e04b      	b.n	e0 <L3GenableDefault+0xe0>  	return res;  }#endif  // 0x6F = 0b01101111  // DR = 01 (190 Hz ODR); BW = 10 (50 Hz bandwidth); PD = 1 (normal mode); Zen = Yen = Xen = 1 (all axes enabled)  res = L3GwriteReg(CTRL_REG1, 0x6F);  48:	2020      	movs	r0, #32  4a:	216f      	movs	r1, #111	; 0x6f  4c:	f7ff fffe 	bl	0 <L3GenableDefault>			4c: R_ARM_THM_CALL	L3GwriteReg  50:	1c03      	adds	r3, r0, #0  52:	1c1a      	adds	r2, r3, #0  54:	4b25      	ldr	r3, [pc, #148]	; (ec <L3GenableDefault+0xec>)  56:	701a      	strb	r2, [r3, #0]  if(res != ERR_OK){  58:	4b24      	ldr	r3, [pc, #144]	; (ec <L3GenableDefault+0xec>)  5a:	781b      	ldrb	r3, [r3, #0]  5c:	2b00      	cmp	r3, #0  5e:	d002      	beq.n	66 <L3GenableDefault+0x66>  	return res;  60:	4b22      	ldr	r3, [pc, #136]	; (ec <L3GenableDefault+0xec>)  62:	781b      	ldrb	r3, [r3, #0]  64:	e03c      	b.n	e0 <L3GenableDefault+0xe0>  }    // 0b0000 0010 = 0x02  // I2C_FIFO overrun interrupt on DRDY/INT2 enable  res = L3GwriteReg(CTRL_REG3, 0x02);  66:	2022      	movs	r0, #34	; 0x22  68:	2102      	movs	r1, #2  6a:	f7ff fffe 	bl	0 <L3GenableDefault>			6a: R_ARM_THM_CALL	L3GwriteReg  6e:	1c03      	adds	r3, r0, #0  70:	1c1a      	adds	r2, r3, #0  72:	4b1e      	ldr	r3, [pc, #120]	; (ec <L3GenableDefault+0xec>)  74:	701a      	strb	r2, [r3, #0]  if(res != ERR_OK){  76:	4b1d      	ldr	r3, [pc, #116]	; (ec <L3GenableDefault+0xec>)  78:	781b      	ldrb	r3, [r3, #0]  7a:	2b00      	cmp	r3, #0  7c:	d002      	beq.n	84 <L3GenableDefault+0x84>  	return res;  7e:	4b1b      	ldr	r3, [pc, #108]	; (ec <L3GenableDefault+0xec>)  80:	781b      	ldrb	r3, [r3, #0]  82:	e02d      	b.n	e0 <L3GenableDefault+0xe0>  }    //0x40 = 0b01000000  // FIFO enable  res = L3GwriteReg(CTRL_REG5, 0x40);  84:	2024      	movs	r0, #36	; 0x24  86:	2140      	movs	r1, #64	; 0x40  88:	f7ff fffe 	bl	0 <L3GenableDefault>			88: R_ARM_THM_CALL	L3GwriteReg  8c:	1c03      	adds	r3, r0, #0  8e:	1c1a      	adds	r2, r3, #0  90:	4b16      	ldr	r3, [pc, #88]	; (ec <L3GenableDefault+0xec>)  92:	701a      	strb	r2, [r3, #0]  if(res != ERR_OK){  94:	4b15      	ldr	r3, [pc, #84]	; (ec <L3GenableDefault+0xec>)  96:	781b      	ldrb	r3, [r3, #0]  98:	2b00      	cmp	r3, #0  9a:	d002      	beq.n	a2 <L3GenableDefault+0xa2>  	return res;  9c:	4b13      	ldr	r3, [pc, #76]	; (ec <L3GenableDefault+0xec>)  9e:	781b      	ldrb	r3, [r3, #0]  a0:	e01e      	b.n	e0 <L3GenableDefault+0xe0>  }    //0xE0 = 0b11100000  // FIFO Stream mode  res = L3GwriteReg(FIFO_CTRL_REG, 0xE0);  a2:	202e      	movs	r0, #46	; 0x2e  a4:	21e0      	movs	r1, #224	; 0xe0  a6:	f7ff fffe 	bl	0 <L3GenableDefault>			a6: R_ARM_THM_CALL	L3GwriteReg  aa:	1c03      	adds	r3, r0, #0  ac:	1c1a      	adds	r2, r3, #0  ae:	4b0f      	ldr	r3, [pc, #60]	; (ec <L3GenableDefault+0xec>)  b0:	701a      	strb	r2, [r3, #0]  if(res != ERR_OK){  b2:	4b0e      	ldr	r3, [pc, #56]	; (ec <L3GenableDefault+0xec>)  b4:	781b      	ldrb	r3, [r3, #0]  b6:	2b00      	cmp	r3, #0  b8:	d002      	beq.n	c0 <L3GenableDefault+0xc0>  	return res;  ba:	4b0c      	ldr	r3, [pc, #48]	; (ec <L3GenableDefault+0xec>)  bc:	781b      	ldrb	r3, [r3, #0]  be:	e00f      	b.n	e0 <L3GenableDefault+0xe0>  // 0x21 = 0b0010 0001 -> cut off 7.2Hz  // 0x20 = 0b0010 0000	-> cut off 13.5Hz  // 0x07 = 0b0000 0111 -> cut off 0.09Hz  // 0x10 =	0b0001 0000  //High pass filter: Normal Mode/  cut off 0.9Hz  res = L3GwriteReg(CTRL_REG2, 0x10);  c0:	2021      	movs	r0, #33	; 0x21  c2:	2110      	movs	r1, #16  c4:	f7ff fffe 	bl	0 <L3GenableDefault>			c4: R_ARM_THM_CALL	L3GwriteReg  c8:	1c03      	adds	r3, r0, #0  ca:	1c1a      	adds	r2, r3, #0  cc:	4b07      	ldr	r3, [pc, #28]	; (ec <L3GenableDefault+0xec>)  ce:	701a      	strb	r2, [r3, #0]  if(res != ERR_OK){  d0:	4b06      	ldr	r3, [pc, #24]	; (ec <L3GenableDefault+0xec>)  d2:	781b      	ldrb	r3, [r3, #0]  d4:	2b00      	cmp	r3, #0  d6:	d002      	beq.n	de <L3GenableDefault+0xde>  	return res;  d8:	4b04      	ldr	r3, [pc, #16]	; (ec <L3GenableDefault+0xec>)  da:	781b      	ldrb	r3, [r3, #0]  dc:	e000      	b.n	e0 <L3GenableDefault+0xe0>  }  return ERR_OK;  de:	2300      	movs	r3, #0}  e0:	1c18      	adds	r0, r3, #0  e2:	46bd      	mov	sp, r7  e4:	bd80      	pop	{r7, pc}  e6:	46c0      	nop			; (mov r8, r8)	...			e8: R_ARM_ABS32	device			ec: R_ARM_ABS32	.bss.resDisassembly of section .text.L3GwriteReg:00000000 <L3GwriteReg>:// Writes a gyro registeruint8_t L3GwriteReg(uint8_t reg, uint8_t value){   0:	b580      	push	{r7, lr}   2:	b086      	sub	sp, #24   4:	af02      	add	r7, sp, #8   6:	1c0a      	adds	r2, r1, #0   8:	1dfb      	adds	r3, r7, #7   a:	1c01      	adds	r1, r0, #0   c:	7019      	strb	r1, [r3, #0]   e:	1dbb      	adds	r3, r7, #6  10:	701a      	strb	r2, [r3, #0]	uint8_t tmp[2];	tmp[0] = reg;  12:	1c3b      	adds	r3, r7, #0  14:	330c      	adds	r3, #12  16:	1dfa      	adds	r2, r7, #7  18:	7812      	ldrb	r2, [r2, #0]  1a:	701a      	strb	r2, [r3, #0]	tmp[1] = reg&0xff;  1c:	1c3b      	adds	r3, r7, #0  1e:	330c      	adds	r3, #12  20:	1dfa      	adds	r2, r7, #7  22:	7812      	ldrb	r2, [r2, #0]  24:	705a      	strb	r2, [r3, #1]	return GI2C1_WriteAddress(gyro.address, &tmp[0], sizeof(tmp), (uint8_t*)(&value), sizeof(value));  26:	4b08      	ldr	r3, [pc, #32]	; (48 <L3GwriteReg+0x48>)  28:	7819      	ldrb	r1, [r3, #0]  2a:	1c3a      	adds	r2, r7, #0  2c:	320c      	adds	r2, #12  2e:	1dbb      	adds	r3, r7, #6  30:	2001      	movs	r0, #1  32:	9000      	str	r0, [sp, #0]  34:	1c08      	adds	r0, r1, #0  36:	1c11      	adds	r1, r2, #0  38:	2202      	movs	r2, #2  3a:	f7ff fffe 	bl	0 <GI2C1_WriteAddress>			3a: R_ARM_THM_CALL	GI2C1_WriteAddress  3e:	1c03      	adds	r3, r0, #0}  40:	1c18      	adds	r0, r3, #0  42:	46bd      	mov	sp, r7  44:	b004      	add	sp, #16  46:	bd80      	pop	{r7, pc}  48:	00000000 	.word	0x00000000			48: R_ARM_ABS32	.bss.gyroDisassembly of section .text.L3GreadReg:00000000 <L3GreadReg>:// Reads a gyro registeruint8_t L3GreadReg(uint8_t reg, uint8_t nbrOfBytes, uint8_t* value){   0:	b580      	push	{r7, lr}   2:	b086      	sub	sp, #24   4:	af02      	add	r7, sp, #8   6:	603a      	str	r2, [r7, #0]   8:	1dfb      	adds	r3, r7, #7   a:	1c02      	adds	r2, r0, #0   c:	701a      	strb	r2, [r3, #0]   e:	1dbb      	adds	r3, r7, #6  10:	1c0a      	adds	r2, r1, #0  12:	701a      	strb	r2, [r3, #0]	uint8_t tmp[2];	tmp[0] = reg;  14:	1c3b      	adds	r3, r7, #0  16:	330c      	adds	r3, #12  18:	1dfa      	adds	r2, r7, #7  1a:	7812      	ldrb	r2, [r2, #0]  1c:	701a      	strb	r2, [r3, #0]	tmp[1] = reg&0xff;  1e:	1c3b      	adds	r3, r7, #0  20:	330c      	adds	r3, #12  22:	1dfa      	adds	r2, r7, #7  24:	7812      	ldrb	r2, [r2, #0]  26:	705a      	strb	r2, [r3, #1]	return GI2C1_ReadAddress(gyro.address, &tmp[0], sizeof(tmp), (uint8_t*)value, nbrOfBytes);  28:	4b09      	ldr	r3, [pc, #36]	; (50 <L3GreadReg+0x50>)  2a:	7819      	ldrb	r1, [r3, #0]  2c:	1dbb      	adds	r3, r7, #6  2e:	781b      	ldrb	r3, [r3, #0]  30:	b298      	uxth	r0, r3  32:	1c3a      	adds	r2, r7, #0  34:	320c      	adds	r2, #12  36:	683b      	ldr	r3, [r7, #0]  38:	9000      	str	r0, [sp, #0]  3a:	1c08      	adds	r0, r1, #0  3c:	1c11      	adds	r1, r2, #0  3e:	2202      	movs	r2, #2  40:	f7ff fffe 	bl	0 <GI2C1_ReadAddress>			40: R_ARM_THM_CALL	GI2C1_ReadAddress  44:	1c03      	adds	r3, r0, #0}  46:	1c18      	adds	r0, r3, #0  48:	46bd      	mov	sp, r7  4a:	b004      	add	sp, #16  4c:	bd80      	pop	{r7, pc}  4e:	46c0      	nop			; (mov r8, r8)  50:	00000000 	.word	0x00000000			50: R_ARM_ABS32	.bss.gyroDisassembly of section .text.L3Greadxyz:00000000 <L3Greadxyz>:/* * Read all three axes of the gyro and write it in the gyro struct * returns ERR_OK if all went good, else error */uint8_t L3Greadxyz(void){   0:	b580      	push	{r7, lr}   2:	b082      	sub	sp, #8   4:	af00      	add	r7, sp, #0 uint8_t value[6]; uint8_t i; for(i=0; i<6; i++){   6:	1dfb      	adds	r3, r7, #7   8:	2200      	movs	r2, #0   a:	701a      	strb	r2, [r3, #0]   c:	e01c      	b.n	48 <L3Greadxyz+0x48>	 res = L3GreadReg((OUT_X_L+i), 1, &value[i]);   e:	1dfb      	adds	r3, r7, #7  10:	781b      	ldrb	r3, [r3, #0]  12:	3328      	adds	r3, #40	; 0x28  14:	b2da      	uxtb	r2, r3  16:	1dfb      	adds	r3, r7, #7  18:	781b      	ldrb	r3, [r3, #0]  1a:	1c39      	adds	r1, r7, #0  1c:	18cb      	adds	r3, r1, r3  1e:	1c10      	adds	r0, r2, #0  20:	2101      	movs	r1, #1  22:	1c1a      	adds	r2, r3, #0  24:	f7ff fffe 	bl	0 <L3Greadxyz>			24: R_ARM_THM_CALL	L3GreadReg  28:	1c03      	adds	r3, r0, #0  2a:	1c1a      	adds	r2, r3, #0  2c:	4b3d      	ldr	r3, [pc, #244]	; (124 <L3Greadxyz+0x124>)  2e:	701a      	strb	r2, [r3, #0]	 if(res!=ERR_OK){  30:	4b3c      	ldr	r3, [pc, #240]	; (124 <L3Greadxyz+0x124>)  32:	781b      	ldrb	r3, [r3, #0]  34:	2b00      	cmp	r3, #0  36:	d002      	beq.n	3e <L3Greadxyz+0x3e>		 return res;  38:	4b3a      	ldr	r3, [pc, #232]	; (124 <L3Greadxyz+0x124>)  3a:	781b      	ldrb	r3, [r3, #0]  3c:	e06e      	b.n	11c <L3Greadxyz+0x11c> */uint8_t L3Greadxyz(void){ uint8_t value[6]; uint8_t i; for(i=0; i<6; i++){  3e:	1dfb      	adds	r3, r7, #7  40:	1dfa      	adds	r2, r7, #7  42:	7812      	ldrb	r2, [r2, #0]  44:	3201      	adds	r2, #1  46:	701a      	strb	r2, [r3, #0]  48:	1dfb      	adds	r3, r7, #7  4a:	781b      	ldrb	r3, [r3, #0]  4c:	2b05      	cmp	r3, #5  4e:	d9de      	bls.n	e <L3Greadxyz+0xe>	 if(res!=ERR_OK){		 return res;	 } }  // combine high and low bytes  gyro.vX = (int16_t)(value[1] << 8 | value[0])/SENSITIVITY-gyro.offsetX;  50:	1c3b      	adds	r3, r7, #0  52:	785b      	ldrb	r3, [r3, #1]  54:	021b      	lsls	r3, r3, #8  56:	b29a      	uxth	r2, r3  58:	1c3b      	adds	r3, r7, #0  5a:	781b      	ldrb	r3, [r3, #0]  5c:	4313      	orrs	r3, r2  5e:	b29b      	uxth	r3, r3  60:	b21b      	sxth	r3, r3  62:	1c18      	adds	r0, r3, #0  64:	2116      	movs	r1, #22  66:	f7ff fffe 	bl	0 <__aeabi_idiv>			66: R_ARM_THM_CALL	__aeabi_idiv  6a:	1c03      	adds	r3, r0, #0  6c:	b29b      	uxth	r3, r3  6e:	b29a      	uxth	r2, r3  70:	4b2d      	ldr	r3, [pc, #180]	; (128 <L3Greadxyz+0x128>)  72:	7ddb      	ldrb	r3, [r3, #23]  74:	b25b      	sxtb	r3, r3  76:	b29b      	uxth	r3, r3  78:	1ad3      	subs	r3, r2, r3  7a:	b29b      	uxth	r3, r3  7c:	b29a      	uxth	r2, r3  7e:	4b2a      	ldr	r3, [pc, #168]	; (128 <L3Greadxyz+0x128>)  80:	805a      	strh	r2, [r3, #2]  gyro.vY = (int16_t)(value[3] << 8 | value[2])/SENSITIVITY-gyro.offsetY;  82:	1c3b      	adds	r3, r7, #0  84:	78db      	ldrb	r3, [r3, #3]  86:	021b      	lsls	r3, r3, #8  88:	b29a      	uxth	r2, r3  8a:	1c3b      	adds	r3, r7, #0  8c:	789b      	ldrb	r3, [r3, #2]  8e:	4313      	orrs	r3, r2  90:	b29b      	uxth	r3, r3  92:	b21b      	sxth	r3, r3  94:	1c18      	adds	r0, r3, #0  96:	2116      	movs	r1, #22  98:	f7ff fffe 	bl	0 <__aeabi_idiv>			98: R_ARM_THM_CALL	__aeabi_idiv  9c:	1c03      	adds	r3, r0, #0  9e:	b29b      	uxth	r3, r3  a0:	b29a      	uxth	r2, r3  a2:	4b21      	ldr	r3, [pc, #132]	; (128 <L3Greadxyz+0x128>)  a4:	7e1b      	ldrb	r3, [r3, #24]  a6:	b25b      	sxtb	r3, r3  a8:	b29b      	uxth	r3, r3  aa:	1ad3      	subs	r3, r2, r3  ac:	b29b      	uxth	r3, r3  ae:	b29a      	uxth	r2, r3  b0:	4b1d      	ldr	r3, [pc, #116]	; (128 <L3Greadxyz+0x128>)  b2:	809a      	strh	r2, [r3, #4]  gyro.vZ = (int16_t)(value[5] << 8 | value[4])/SENSITIVITY-gyro.offsetZ;  b4:	1c3b      	adds	r3, r7, #0  b6:	795b      	ldrb	r3, [r3, #5]  b8:	021b      	lsls	r3, r3, #8  ba:	b29a      	uxth	r2, r3  bc:	1c3b      	adds	r3, r7, #0  be:	791b      	ldrb	r3, [r3, #4]  c0:	4313      	orrs	r3, r2  c2:	b29b      	uxth	r3, r3  c4:	b21b      	sxth	r3, r3  c6:	1c18      	adds	r0, r3, #0  c8:	2116      	movs	r1, #22  ca:	f7ff fffe 	bl	0 <__aeabi_idiv>			ca: R_ARM_THM_CALL	__aeabi_idiv  ce:	1c03      	adds	r3, r0, #0  d0:	b29b      	uxth	r3, r3  d2:	b29a      	uxth	r2, r3  d4:	4b14      	ldr	r3, [pc, #80]	; (128 <L3Greadxyz+0x128>)  d6:	7e5b      	ldrb	r3, [r3, #25]  d8:	b25b      	sxtb	r3, r3  da:	b29b      	uxth	r3, r3  dc:	1ad3      	subs	r3, r2, r3  de:	b29b      	uxth	r3, r3  e0:	b29a      	uxth	r2, r3  e2:	4b11      	ldr	r3, [pc, #68]	; (128 <L3Greadxyz+0x128>)  e4:	80da      	strh	r2, [r3, #6]    gyro.x += gyro.vX;  e6:	4b10      	ldr	r3, [pc, #64]	; (128 <L3Greadxyz+0x128>)  e8:	689a      	ldr	r2, [r3, #8]  ea:	4b0f      	ldr	r3, [pc, #60]	; (128 <L3Greadxyz+0x128>)  ec:	885b      	ldrh	r3, [r3, #2]  ee:	b21b      	sxth	r3, r3  f0:	18d2      	adds	r2, r2, r3  f2:	4b0d      	ldr	r3, [pc, #52]	; (128 <L3Greadxyz+0x128>)  f4:	609a      	str	r2, [r3, #8]  gyro.y += gyro.vY;  f6:	4b0c      	ldr	r3, [pc, #48]	; (128 <L3Greadxyz+0x128>)  f8:	68da      	ldr	r2, [r3, #12]  fa:	4b0b      	ldr	r3, [pc, #44]	; (128 <L3Greadxyz+0x128>)  fc:	889b      	ldrh	r3, [r3, #4]  fe:	b21b      	sxth	r3, r3 100:	18d2      	adds	r2, r2, r3 102:	4b09      	ldr	r3, [pc, #36]	; (128 <L3Greadxyz+0x128>) 104:	60da      	str	r2, [r3, #12]  gyro.z += gyro.vZ; 106:	4b08      	ldr	r3, [pc, #32]	; (128 <L3Greadxyz+0x128>) 108:	691a      	ldr	r2, [r3, #16] 10a:	4b07      	ldr	r3, [pc, #28]	; (128 <L3Greadxyz+0x128>) 10c:	88db      	ldrh	r3, [r3, #6] 10e:	b21b      	sxth	r3, r3 110:	18d2      	adds	r2, r2, r3 112:	4b05      	ldr	r3, [pc, #20]	; (128 <L3Greadxyz+0x128>) 114:	611a      	str	r2, [r3, #16]  #if MMA1  combineAccel(); 116:	f7ff fffe 	bl	0 <L3Greadxyz>			116: R_ARM_THM_CALL	combineAccel#endif    return ERR_OK; 11a:	2300      	movs	r3, #0} 11c:	1c18      	adds	r0, r3, #0 11e:	46bd      	mov	sp, r7 120:	b002      	add	sp, #8 122:	bd80      	pop	{r7, pc}	...			124: R_ARM_ABS32	.bss.res			128: R_ARM_ABS32	.bss.gyroDisassembly of section .text.L3Gread:00000000 <L3Gread>:/* * Read one axis of the gyro and write it in the gyro struct * returns ERR_OK if all went good, else error */uint8_t L3Gread(char dim){   0:	b580      	push	{r7, lr}   2:	b084      	sub	sp, #16   4:	af00      	add	r7, sp, #0   6:	1c02      	adds	r2, r0, #0   8:	1dfb      	adds	r3, r7, #7   a:	701a      	strb	r2, [r3, #0]	uint8_t value[2];	uint8_t i;	uint8_t reg;	 	switch(dim){   c:	1dfb      	adds	r3, r7, #7   e:	781b      	ldrb	r3, [r3, #0]  10:	3b58      	subs	r3, #88	; 0x58  12:	2b22      	cmp	r3, #34	; 0x22  14:	d813      	bhi.n	3e <L3Gread+0x3e>  16:	009a      	lsls	r2, r3, #2  18:	4b60      	ldr	r3, [pc, #384]	; (19c <L3Gread+0x19c>)  1a:	18d3      	adds	r3, r2, r3  1c:	681b      	ldr	r3, [r3, #0]  1e:	469f      	mov	pc, r3	case 'x':;	case 'X': reg = OUT_X_L;  20:	1c3b      	adds	r3, r7, #0  22:	330e      	adds	r3, #14  24:	2228      	movs	r2, #40	; 0x28  26:	701a      	strb	r2, [r3, #0]	break;  28:	e00a      	b.n	40 <L3Gread+0x40>	case 'y':;	case 'Y': reg = OUT_Y_L;  2a:	1c3b      	adds	r3, r7, #0  2c:	330e      	adds	r3, #14  2e:	222a      	movs	r2, #42	; 0x2a  30:	701a      	strb	r2, [r3, #0]	break;  32:	e005      	b.n	40 <L3Gread+0x40>	case 'z':;	case 'Z': reg = OUT_Z_L;  34:	1c3b      	adds	r3, r7, #0  36:	330e      	adds	r3, #14  38:	222c      	movs	r2, #44	; 0x2c  3a:	701a      	strb	r2, [r3, #0]	break;  3c:	e000      	b.n	40 <L3Gread+0x40>	default:; // error	break;  3e:	46c0      	nop			; (mov r8, r8)	}	for(i=0; i<2; i++){  40:	1c3b      	adds	r3, r7, #0  42:	330f      	adds	r3, #15  44:	2200      	movs	r2, #0  46:	701a      	strb	r2, [r3, #0]  48:	e024      	b.n	94 <L3Gread+0x94>		res = L3GreadReg((reg+i), 1, &value[i]);  4a:	1c3a      	adds	r2, r7, #0  4c:	320e      	adds	r2, #14  4e:	1c3b      	adds	r3, r7, #0  50:	330f      	adds	r3, #15  52:	7812      	ldrb	r2, [r2, #0]  54:	781b      	ldrb	r3, [r3, #0]  56:	18d3      	adds	r3, r2, r3  58:	b2da      	uxtb	r2, r3  5a:	1c3b      	adds	r3, r7, #0  5c:	330f      	adds	r3, #15  5e:	781b      	ldrb	r3, [r3, #0]  60:	1c39      	adds	r1, r7, #0  62:	310c      	adds	r1, #12  64:	18cb      	adds	r3, r1, r3  66:	1c10      	adds	r0, r2, #0  68:	2101      	movs	r1, #1  6a:	1c1a      	adds	r2, r3, #0  6c:	f7ff fffe 	bl	0 <L3Gread>			6c: R_ARM_THM_CALL	L3GreadReg  70:	1c03      	adds	r3, r0, #0  72:	1c1a      	adds	r2, r3, #0  74:	4b4a      	ldr	r3, [pc, #296]	; (1a0 <L3Gread+0x1a0>)  76:	701a      	strb	r2, [r3, #0]		 if(res!=ERR_OK){  78:	4b49      	ldr	r3, [pc, #292]	; (1a0 <L3Gread+0x1a0>)  7a:	781b      	ldrb	r3, [r3, #0]  7c:	2b00      	cmp	r3, #0  7e:	d002      	beq.n	86 <L3Gread+0x86>			 return res;  80:	4b47      	ldr	r3, [pc, #284]	; (1a0 <L3Gread+0x1a0>)  82:	781b      	ldrb	r3, [r3, #0]  84:	e085      	b.n	192 <L3Gread+0x192>	case 'Z': reg = OUT_Z_L;	break;	default:; // error	break;	}	for(i=0; i<2; i++){  86:	1c3b      	adds	r3, r7, #0  88:	330f      	adds	r3, #15  8a:	1c3a      	adds	r2, r7, #0  8c:	320f      	adds	r2, #15  8e:	7812      	ldrb	r2, [r2, #0]  90:	3201      	adds	r2, #1  92:	701a      	strb	r2, [r3, #0]  94:	1c3b      	adds	r3, r7, #0  96:	330f      	adds	r3, #15  98:	781b      	ldrb	r3, [r3, #0]  9a:	2b01      	cmp	r3, #1  9c:	d9d5      	bls.n	4a <L3Gread+0x4a>		 if(res!=ERR_OK){			 return res;		 }	}	// combine high and low bytes	switch(dim){  9e:	1dfb      	adds	r3, r7, #7  a0:	781b      	ldrb	r3, [r3, #0]  a2:	3b58      	subs	r3, #88	; 0x58  a4:	2b22      	cmp	r3, #34	; 0x22  a6:	d872      	bhi.n	18e <L3Gread+0x18e>  a8:	009a      	lsls	r2, r3, #2  aa:	4b3e      	ldr	r3, [pc, #248]	; (1a4 <L3Gread+0x1a4>)  ac:	18d3      	adds	r3, r2, r3  ae:	681b      	ldr	r3, [r3, #0]  b0:	469f      	mov	pc, r3	case 'x':;	case 'X': 	gyro.vX = (int16_t)(value[1] << 8 | value[0])/SENSITIVITY-gyro.offsetX;  b2:	1c3b      	adds	r3, r7, #0  b4:	330c      	adds	r3, #12  b6:	785b      	ldrb	r3, [r3, #1]  b8:	021b      	lsls	r3, r3, #8  ba:	b29a      	uxth	r2, r3  bc:	1c3b      	adds	r3, r7, #0  be:	330c      	adds	r3, #12  c0:	781b      	ldrb	r3, [r3, #0]  c2:	4313      	orrs	r3, r2  c4:	b29b      	uxth	r3, r3  c6:	b21b      	sxth	r3, r3  c8:	1c18      	adds	r0, r3, #0  ca:	2116      	movs	r1, #22  cc:	f7ff fffe 	bl	0 <__aeabi_idiv>			cc: R_ARM_THM_CALL	__aeabi_idiv  d0:	1c03      	adds	r3, r0, #0  d2:	b29b      	uxth	r3, r3  d4:	b29a      	uxth	r2, r3  d6:	4b34      	ldr	r3, [pc, #208]	; (1a8 <L3Gread+0x1a8>)  d8:	7ddb      	ldrb	r3, [r3, #23]  da:	b25b      	sxtb	r3, r3  dc:	b29b      	uxth	r3, r3  de:	1ad3      	subs	r3, r2, r3  e0:	b29b      	uxth	r3, r3  e2:	b29a      	uxth	r2, r3  e4:	4b30      	ldr	r3, [pc, #192]	; (1a8 <L3Gread+0x1a8>)  e6:	805a      	strh	r2, [r3, #2]				gyro.x += gyro.vX;    e8:	4b2f      	ldr	r3, [pc, #188]	; (1a8 <L3Gread+0x1a8>)  ea:	689a      	ldr	r2, [r3, #8]  ec:	4b2e      	ldr	r3, [pc, #184]	; (1a8 <L3Gread+0x1a8>)  ee:	885b      	ldrh	r3, [r3, #2]  f0:	b21b      	sxth	r3, r3  f2:	18d2      	adds	r2, r2, r3  f4:	4b2c      	ldr	r3, [pc, #176]	; (1a8 <L3Gread+0x1a8>)  f6:	609a      	str	r2, [r3, #8]	break;  f8:	e04a      	b.n	190 <L3Gread+0x190>	case 'y':;	case 'Y': 	gyro.vY = (int16_t)(value[1] << 8 | value[0])/SENSITIVITY-gyro.offsetY;  fa:	1c3b      	adds	r3, r7, #0  fc:	330c      	adds	r3, #12  fe:	785b      	ldrb	r3, [r3, #1] 100:	021b      	lsls	r3, r3, #8 102:	b29a      	uxth	r2, r3 104:	1c3b      	adds	r3, r7, #0 106:	330c      	adds	r3, #12 108:	781b      	ldrb	r3, [r3, #0] 10a:	4313      	orrs	r3, r2 10c:	b29b      	uxth	r3, r3 10e:	b21b      	sxth	r3, r3 110:	1c18      	adds	r0, r3, #0 112:	2116      	movs	r1, #22 114:	f7ff fffe 	bl	0 <__aeabi_idiv>			114: R_ARM_THM_CALL	__aeabi_idiv 118:	1c03      	adds	r3, r0, #0 11a:	b29b      	uxth	r3, r3 11c:	b29a      	uxth	r2, r3 11e:	4b22      	ldr	r3, [pc, #136]	; (1a8 <L3Gread+0x1a8>) 120:	7e1b      	ldrb	r3, [r3, #24] 122:	b25b      	sxtb	r3, r3 124:	b29b      	uxth	r3, r3 126:	1ad3      	subs	r3, r2, r3 128:	b29b      	uxth	r3, r3 12a:	b29a      	uxth	r2, r3 12c:	4b1e      	ldr	r3, [pc, #120]	; (1a8 <L3Gread+0x1a8>) 12e:	809a      	strh	r2, [r3, #4]				gyro.y += gyro.vY; 130:	4b1d      	ldr	r3, [pc, #116]	; (1a8 <L3Gread+0x1a8>) 132:	68da      	ldr	r2, [r3, #12] 134:	4b1c      	ldr	r3, [pc, #112]	; (1a8 <L3Gread+0x1a8>) 136:	889b      	ldrh	r3, [r3, #4] 138:	b21b      	sxth	r3, r3 13a:	18d2      	adds	r2, r2, r3 13c:	4b1a      	ldr	r3, [pc, #104]	; (1a8 <L3Gread+0x1a8>) 13e:	60da      	str	r2, [r3, #12]	break; 140:	e026      	b.n	190 <L3Gread+0x190>	case 'z':;	case 'Z': 	gyro.vZ = (int16_t)(value[1] << 8 | value[0])/SENSITIVITY-gyro.offsetZ; 142:	1c3b      	adds	r3, r7, #0 144:	330c      	adds	r3, #12 146:	785b      	ldrb	r3, [r3, #1] 148:	021b      	lsls	r3, r3, #8 14a:	b29a      	uxth	r2, r3 14c:	1c3b      	adds	r3, r7, #0 14e:	330c      	adds	r3, #12 150:	781b      	ldrb	r3, [r3, #0] 152:	4313      	orrs	r3, r2 154:	b29b      	uxth	r3, r3 156:	b21b      	sxth	r3, r3 158:	1c18      	adds	r0, r3, #0 15a:	2116      	movs	r1, #22 15c:	f7ff fffe 	bl	0 <__aeabi_idiv>			15c: R_ARM_THM_CALL	__aeabi_idiv 160:	1c03      	adds	r3, r0, #0 162:	b29b      	uxth	r3, r3 164:	b29a      	uxth	r2, r3 166:	4b10      	ldr	r3, [pc, #64]	; (1a8 <L3Gread+0x1a8>) 168:	7e5b      	ldrb	r3, [r3, #25] 16a:	b25b      	sxtb	r3, r3 16c:	b29b      	uxth	r3, r3 16e:	1ad3      	subs	r3, r2, r3 170:	b29b      	uxth	r3, r3 172:	b29a      	uxth	r2, r3 174:	4b0c      	ldr	r3, [pc, #48]	; (1a8 <L3Gread+0x1a8>) 176:	80da      	strh	r2, [r3, #6]				gyro.z += gyro.vZ; 178:	4b0b      	ldr	r3, [pc, #44]	; (1a8 <L3Gread+0x1a8>) 17a:	691a      	ldr	r2, [r3, #16] 17c:	4b0a      	ldr	r3, [pc, #40]	; (1a8 <L3Gread+0x1a8>) 17e:	88db      	ldrh	r3, [r3, #6] 180:	b21b      	sxth	r3, r3 182:	18d2      	adds	r2, r2, r3 184:	4b08      	ldr	r3, [pc, #32]	; (1a8 <L3Gread+0x1a8>) 186:	611a      	str	r2, [r3, #16]								#if MMA1					combineAccel(); 188:	f7ff fffe 	bl	0 <L3Gread>			188: R_ARM_THM_CALL	combineAccel				#endif				 	break; 18c:	e000      	b.n	190 <L3Gread+0x190>	default:; // error	break; 18e:	46c0      	nop			; (mov r8, r8)	}	return ERR_OK; 190:	2300      	movs	r3, #0} 192:	1c18      	adds	r0, r3, #0 194:	46bd      	mov	sp, r7 196:	b004      	add	sp, #16 198:	bd80      	pop	{r7, pc} 19a:	46c0      	nop			; (mov r8, r8)	...			19c: R_ARM_ABS32	.rodata.L3Gread			1a0: R_ARM_ABS32	.bss.res 1a4:	0000008c 	.word	0x0000008c			1a4: R_ARM_ABS32	.rodata.L3Gread 1a8:	00000000 	.word	0x00000000			1a8: R_ARM_ABS32	.bss.gyroDisassembly of section .text.L3GgetDegree:00000000 <L3GgetDegree>:int8_t L3GgetDegree(char dim, int16_t* value){   0:	b084b580 	.word	0xb084b580   4:	af00      	add	r7, sp, #0   6:	1c02      	adds	r2, r0, #0   8:	6039      	str	r1, [r7, #0]   a:	1dfb      	adds	r3, r7, #7   c:	701a      	strb	r2, [r3, #0]	int8_t err = ERR_OK;   e:	1c3b      	adds	r3, r7, #0  10:	330f      	adds	r3, #15  12:	2200      	movs	r2, #0  14:	701a      	strb	r2, [r3, #0]	switch(dim){  16:	1dfb      	adds	r3, r7, #7  18:	781b      	ldrb	r3, [r3, #0]  1a:	3b58      	subs	r3, #88	; 0x58  1c:	2b22      	cmp	r3, #34	; 0x22  1e:	d828      	bhi.n	72 <L3GgetDegree+0x72>  20:	009a      	lsls	r2, r3, #2  22:	4b2b      	ldr	r3, [pc, #172]	; (d0 <L3GgetDegree+0xd0>)  24:	18d3      	adds	r3, r2, r3  26:	681b      	ldr	r3, [r3, #0]  28:	469f      	mov	pc, r3	case 'x':;	case 'X':*value = gyro.x/1000;  2a:	4b2a      	ldr	r3, [pc, #168]	; (d4 <L3GgetDegree+0xd4>)  2c:	689b      	ldr	r3, [r3, #8]  2e:	1c18      	adds	r0, r3, #0  30:	23fa      	movs	r3, #250	; 0xfa  32:	0099      	lsls	r1, r3, #2  34:	f7ff fffe 	bl	0 <__aeabi_idiv>			34: R_ARM_THM_CALL	__aeabi_idiv  38:	1c03      	adds	r3, r0, #0  3a:	b29a      	uxth	r2, r3  3c:	683b      	ldr	r3, [r7, #0]  3e:	801a      	strh	r2, [r3, #0]	break;  40:	e018      	b.n	74 <L3GgetDegree+0x74>	case 'y':;	case 'Y':*value = gyro.y/1000;  42:	4b24      	ldr	r3, [pc, #144]	; (d4 <L3GgetDegree+0xd4>)  44:	68db      	ldr	r3, [r3, #12]  46:	1c18      	adds	r0, r3, #0  48:	23fa      	movs	r3, #250	; 0xfa  4a:	0099      	lsls	r1, r3, #2  4c:	f7ff fffe 	bl	0 <__aeabi_idiv>			4c: R_ARM_THM_CALL	__aeabi_idiv  50:	1c03      	adds	r3, r0, #0  52:	b29a      	uxth	r2, r3  54:	683b      	ldr	r3, [r7, #0]  56:	801a      	strh	r2, [r3, #0]	break;  58:	e00c      	b.n	74 <L3GgetDegree+0x74>	case 'z':;	case 'Z': *value = gyro.z/1000;  5a:	4b1e      	ldr	r3, [pc, #120]	; (d4 <L3GgetDegree+0xd4>)  5c:	691b      	ldr	r3, [r3, #16]  5e:	1c18      	adds	r0, r3, #0  60:	23fa      	movs	r3, #250	; 0xfa  62:	0099      	lsls	r1, r3, #2  64:	f7ff fffe 	bl	0 <__aeabi_idiv>			64: R_ARM_THM_CALL	__aeabi_idiv  68:	1c03      	adds	r3, r0, #0  6a:	b29a      	uxth	r2, r3  6c:	683b      	ldr	r3, [r7, #0]  6e:	801a      	strh	r2, [r3, #0]	break;  70:	e000      	b.n	74 <L3GgetDegree+0x74>	default: ; // error	break;  72:	46c0      	nop			; (mov r8, r8)	}	if(*value>180){  74:	683b      	ldr	r3, [r7, #0]  76:	881b      	ldrh	r3, [r3, #0]  78:	b21b      	sxth	r3, r3  7a:	2bb4      	cmp	r3, #180	; 0xb4  7c:	dd0d      	ble.n	9a <L3GgetDegree+0x9a>		*value-=360;  7e:	683b      	ldr	r3, [r7, #0]  80:	881b      	ldrh	r3, [r3, #0]  82:	b29b      	uxth	r3, r3  84:	3b69      	subs	r3, #105	; 0x69  86:	3bff      	subs	r3, #255	; 0xff  88:	b29b      	uxth	r3, r3  8a:	b29a      	uxth	r2, r3  8c:	683b      	ldr	r3, [r7, #0]  8e:	801a      	strh	r2, [r3, #0]		err = ERR_OVERFLOW;   90:	1c3b      	adds	r3, r7, #0  92:	330f      	adds	r3, #15  94:	2204      	movs	r2, #4  96:	701a      	strb	r2, [r3, #0]  98:	e012      	b.n	c0 <L3GgetDegree+0xc0>	}else if(*value<=-180){  9a:	683b      	ldr	r3, [r7, #0]  9c:	881b      	ldrh	r3, [r3, #0]  9e:	b21b      	sxth	r3, r3  a0:	1c1a      	adds	r2, r3, #0  a2:	32b3      	adds	r2, #179	; 0xb3  a4:	da0c      	bge.n	c0 <L3GgetDegree+0xc0>		*value+=360;  a6:	683b      	ldr	r3, [r7, #0]  a8:	881b      	ldrh	r3, [r3, #0]  aa:	b29b      	uxth	r3, r3  ac:	3369      	adds	r3, #105	; 0x69  ae:	33ff      	adds	r3, #255	; 0xff  b0:	b29b      	uxth	r3, r3  b2:	b29a      	uxth	r2, r3  b4:	683b      	ldr	r3, [r7, #0]  b6:	801a      	strh	r2, [r3, #0]		err = ERR_OVERFLOW;  b8:	1c3b      	adds	r3, r7, #0  ba:	330f      	adds	r3, #15  bc:	2204      	movs	r2, #4  be:	701a      	strb	r2, [r3, #0]	}	return err;  c0:	1c3b      	adds	r3, r7, #0  c2:	330f      	adds	r3, #15  c4:	781b      	ldrb	r3, [r3, #0]  c6:	b25b      	sxtb	r3, r3}  c8:	1c18      	adds	r0, r3, #0  ca:	46bd      	mov	sp, r7  cc:	b004      	add	sp, #16  ce:	bd80      	pop	{r7, pc}	...			d0: R_ARM_ABS32	.rodata.L3GgetDegree			d4: R_ARM_ABS32	.bss.gyroDisassembly of section .text.L3GreadTemp:00000000 <L3GreadTemp>:/* * Read temperature from the sensor *  */void L3GreadTemp(void){   0:	b580      	push	{r7, lr}   2:	af00      	add	r7, sp, #0	L3GreadReg(OUT_TEMP, 1, &(gyro.temp));   4:	4b03      	ldr	r3, [pc, #12]	; (14 <L3GreadTemp+0x14>)   6:	2026      	movs	r0, #38	; 0x26   8:	2101      	movs	r1, #1   a:	1c1a      	adds	r2, r3, #0   c:	f7ff fffe 	bl	0 <L3GreadTemp>			c: R_ARM_THM_CALL	L3GreadReg}  10:	46bd      	mov	sp, r7  12:	bd80      	pop	{r7, pc}  14:	0000001a 	.word	0x0000001a			14: R_ARM_ABS32	.bss.gyroDisassembly of section .text.calculateOffset:00000000 <calculateOffset>: * Calculate the offset of the 3 axis. Don't move the device while calculating! * this has to be done just 1 time, as the value is almost not depending on time or temperature! * the offset is +/- 10% max of +/-250dps fullscale -> Sensitivity = 8.75mdps/digit * offsetMAX = 2^16*8.75*0.1/2 = +/- 28'672 */uint8_t calculateOffset(void){   0:	b580      	push	{r7, lr}   2:	b082      	sub	sp, #8   4:	af00      	add	r7, sp, #0	uint16_t i;	uint8_t errCount = 0;   6:	1d7b      	adds	r3, r7, #5   8:	2200      	movs	r2, #0   a:	701a      	strb	r2, [r3, #0]	uint8_t err;	res = ERR_OK;   c:	4b5f      	ldr	r3, [pc, #380]	; (18c <calculateOffset+0x18c>)   e:	2200      	movs	r2, #0  10:	701a      	strb	r2, [r3, #0]	for(i=0;i<NBROFFSET;i++){  12:	1dbb      	adds	r3, r7, #6  14:	2200      	movs	r2, #0  16:	801a      	strh	r2, [r3, #0]  18:	e02f      	b.n	7a <calculateOffset+0x7a>		res = L3Greadxyz();  1a:	f7ff fffe 	bl	0 <calculateOffset>			1a: R_ARM_THM_CALL	L3Greadxyz  1e:	1c03      	adds	r3, r0, #0  20:	1c1a      	adds	r2, r3, #0  22:	4b5a      	ldr	r3, [pc, #360]	; (18c <calculateOffset+0x18c>)  24:	701a      	strb	r2, [r3, #0]		vX[i]=gyro.vX;  26:	1dbb      	adds	r3, r7, #6  28:	881a      	ldrh	r2, [r3, #0]  2a:	4b59      	ldr	r3, [pc, #356]	; (190 <calculateOffset+0x190>)  2c:	8859      	ldrh	r1, [r3, #2]  2e:	4b59      	ldr	r3, [pc, #356]	; (194 <calculateOffset+0x194>)  30:	0052      	lsls	r2, r2, #1  32:	52d1      	strh	r1, [r2, r3]		vY[i]=gyro.vY;  34:	1dbb      	adds	r3, r7, #6  36:	881a      	ldrh	r2, [r3, #0]  38:	4b55      	ldr	r3, [pc, #340]	; (190 <calculateOffset+0x190>)  3a:	8899      	ldrh	r1, [r3, #4]  3c:	4b56      	ldr	r3, [pc, #344]	; (198 <calculateOffset+0x198>)  3e:	0052      	lsls	r2, r2, #1  40:	52d1      	strh	r1, [r2, r3]		vZ[i]=gyro.vZ;  42:	1dbb      	adds	r3, r7, #6  44:	881a      	ldrh	r2, [r3, #0]  46:	4b52      	ldr	r3, [pc, #328]	; (190 <calculateOffset+0x190>)  48:	88d9      	ldrh	r1, [r3, #6]  4a:	4b54      	ldr	r3, [pc, #336]	; (19c <calculateOffset+0x19c>)  4c:	0052      	lsls	r2, r2, #1  4e:	52d1      	strh	r1, [r2, r3]		vTaskDelay(pdMS_TO_TICKS(5));  50:	2000      	movs	r0, #0  52:	f7ff fffe 	bl	0 <vTaskDelay>			52: R_ARM_THM_CALL	vTaskDelay		if(res != ERR_OK){  56:	4b4d      	ldr	r3, [pc, #308]	; (18c <calculateOffset+0x18c>)  58:	781b      	ldrb	r3, [r3, #0]  5a:	2b00      	cmp	r3, #0  5c:	d008      	beq.n	70 <calculateOffset+0x70>			errCount++;  5e:	1d7b      	adds	r3, r7, #5  60:	1d7a      	adds	r2, r7, #5  62:	7812      	ldrb	r2, [r2, #0]  64:	3201      	adds	r2, #1  66:	701a      	strb	r2, [r3, #0]			err = res;  68:	1d3b      	adds	r3, r7, #4  6a:	4a48      	ldr	r2, [pc, #288]	; (18c <calculateOffset+0x18c>)  6c:	7812      	ldrb	r2, [r2, #0]  6e:	701a      	strb	r2, [r3, #0]uint8_t calculateOffset(void){	uint16_t i;	uint8_t errCount = 0;	uint8_t err;	res = ERR_OK;	for(i=0;i<NBROFFSET;i++){  70:	1dbb      	adds	r3, r7, #6  72:	1dba      	adds	r2, r7, #6  74:	8812      	ldrh	r2, [r2, #0]  76:	3201      	adds	r2, #1  78:	801a      	strh	r2, [r3, #0]  7a:	1dbb      	adds	r3, r7, #6  7c:	881b      	ldrh	r3, [r3, #0]  7e:	2bc7      	cmp	r3, #199	; 0xc7  80:	d9cb      	bls.n	1a <calculateOffset+0x1a>		if(res != ERR_OK){			errCount++;			err = res;		}	}	if(errCount>=(NBROFFSET/10)){  82:	1d7b      	adds	r3, r7, #5  84:	781b      	ldrb	r3, [r3, #0]  86:	2b13      	cmp	r3, #19  88:	d902      	bls.n	90 <calculateOffset+0x90>		return err;  8a:	1d3b      	adds	r3, r7, #4  8c:	781b      	ldrb	r3, [r3, #0]  8e:	e078      	b.n	182 <calculateOffset+0x182>	}	qsort(&vX[0], NBROFFSET, sizeof(int16_t), (_compare_function) cmpfunc);  90:	4a40      	ldr	r2, [pc, #256]	; (194 <calculateOffset+0x194>)  92:	4b43      	ldr	r3, [pc, #268]	; (1a0 <calculateOffset+0x1a0>)  94:	1c10      	adds	r0, r2, #0  96:	21c8      	movs	r1, #200	; 0xc8  98:	2202      	movs	r2, #2  9a:	f7ff fffe 	bl	0 <qsort>			9a: R_ARM_THM_CALL	qsort	qsort(&vY[0], NBROFFSET, sizeof(int16_t), (_compare_function) cmpfunc);  9e:	4a3e      	ldr	r2, [pc, #248]	; (198 <calculateOffset+0x198>)  a0:	4b3f      	ldr	r3, [pc, #252]	; (1a0 <calculateOffset+0x1a0>)  a2:	1c10      	adds	r0, r2, #0  a4:	21c8      	movs	r1, #200	; 0xc8  a6:	2202      	movs	r2, #2  a8:	f7ff fffe 	bl	0 <qsort>			a8: R_ARM_THM_CALL	qsort	qsort(&vZ[0], NBROFFSET, sizeof(int16_t), (_compare_function) cmpfunc);  ac:	4a3b      	ldr	r2, [pc, #236]	; (19c <calculateOffset+0x19c>)  ae:	4b3c      	ldr	r3, [pc, #240]	; (1a0 <calculateOffset+0x1a0>)  b0:	1c10      	adds	r0, r2, #0  b2:	21c8      	movs	r1, #200	; 0xc8  b4:	2202      	movs	r2, #2  b6:	f7ff fffe 	bl	0 <qsort>			b6: R_ARM_THM_CALL	qsort	gyro.offsetX += (int8_t)vX[NBROFFSET/2];  ba:	4b35      	ldr	r3, [pc, #212]	; (190 <calculateOffset+0x190>)  bc:	7ddb      	ldrb	r3, [r3, #23]  be:	b2da      	uxtb	r2, r3  c0:	4934      	ldr	r1, [pc, #208]	; (194 <calculateOffset+0x194>)  c2:	23c8      	movs	r3, #200	; 0xc8  c4:	5acb      	ldrh	r3, [r1, r3]  c6:	b2db      	uxtb	r3, r3  c8:	18d3      	adds	r3, r2, r3  ca:	b2db      	uxtb	r3, r3  cc:	b2da      	uxtb	r2, r3  ce:	4b30      	ldr	r3, [pc, #192]	; (190 <calculateOffset+0x190>)  d0:	75da      	strb	r2, [r3, #23]	gyro.offsetY += (int8_t)vY[NBROFFSET/2];  d2:	4b2f      	ldr	r3, [pc, #188]	; (190 <calculateOffset+0x190>)  d4:	7e1b      	ldrb	r3, [r3, #24]  d6:	b2da      	uxtb	r2, r3  d8:	492f      	ldr	r1, [pc, #188]	; (198 <calculateOffset+0x198>)  da:	23c8      	movs	r3, #200	; 0xc8  dc:	5acb      	ldrh	r3, [r1, r3]  de:	b2db      	uxtb	r3, r3  e0:	18d3      	adds	r3, r2, r3  e2:	b2db      	uxtb	r3, r3  e4:	b2da      	uxtb	r2, r3  e6:	4b2a      	ldr	r3, [pc, #168]	; (190 <calculateOffset+0x190>)  e8:	761a      	strb	r2, [r3, #24]	gyro.offsetZ += (int8_t)vZ[NBROFFSET/2];  ea:	4b29      	ldr	r3, [pc, #164]	; (190 <calculateOffset+0x190>)  ec:	7e5b      	ldrb	r3, [r3, #25]  ee:	b2da      	uxtb	r2, r3  f0:	492a      	ldr	r1, [pc, #168]	; (19c <calculateOffset+0x19c>)  f2:	23c8      	movs	r3, #200	; 0xc8  f4:	5acb      	ldrh	r3, [r1, r3]  f6:	b2db      	uxtb	r3, r3  f8:	18d3      	adds	r3, r2, r3  fa:	b2db      	uxtb	r3, r3  fc:	b2da      	uxtb	r2, r3  fe:	4b24      	ldr	r3, [pc, #144]	; (190 <calculateOffset+0x190>) 100:	765a      	strb	r2, [r3, #25]	gyro.noiseX = (int8_t)(vX[NBROFFSET/3*2]-vY[NBROFFSET/3]); 102:	4a24      	ldr	r2, [pc, #144]	; (194 <calculateOffset+0x194>) 104:	2384      	movs	r3, #132	; 0x84 106:	005b      	lsls	r3, r3, #1 108:	5ad3      	ldrh	r3, [r2, r3] 10a:	b2da      	uxtb	r2, r3 10c:	4922      	ldr	r1, [pc, #136]	; (198 <calculateOffset+0x198>) 10e:	2384      	movs	r3, #132	; 0x84 110:	5acb      	ldrh	r3, [r1, r3] 112:	b2db      	uxtb	r3, r3 114:	1ad3      	subs	r3, r2, r3 116:	b2db      	uxtb	r3, r3 118:	b2da      	uxtb	r2, r3 11a:	4b1d      	ldr	r3, [pc, #116]	; (190 <calculateOffset+0x190>) 11c:	751a      	strb	r2, [r3, #20]	gyro.noiseY = (int8_t)(vY[NBROFFSET/3*2]-vY[NBROFFSET/3]); 11e:	4a1e      	ldr	r2, [pc, #120]	; (198 <calculateOffset+0x198>) 120:	2384      	movs	r3, #132	; 0x84 122:	005b      	lsls	r3, r3, #1 124:	5ad3      	ldrh	r3, [r2, r3] 126:	b2da      	uxtb	r2, r3 128:	491b      	ldr	r1, [pc, #108]	; (198 <calculateOffset+0x198>) 12a:	2384      	movs	r3, #132	; 0x84 12c:	5acb      	ldrh	r3, [r1, r3] 12e:	b2db      	uxtb	r3, r3 130:	1ad3      	subs	r3, r2, r3 132:	b2db      	uxtb	r3, r3 134:	b2da      	uxtb	r2, r3 136:	4b16      	ldr	r3, [pc, #88]	; (190 <calculateOffset+0x190>) 138:	755a      	strb	r2, [r3, #21]	gyro.noiseZ = (int8_t)(vZ[NBROFFSET/3*2]-vZ[NBROFFSET/3]); 13a:	4a18      	ldr	r2, [pc, #96]	; (19c <calculateOffset+0x19c>) 13c:	2384      	movs	r3, #132	; 0x84 13e:	005b      	lsls	r3, r3, #1 140:	5ad3      	ldrh	r3, [r2, r3] 142:	b2da      	uxtb	r2, r3 144:	4915      	ldr	r1, [pc, #84]	; (19c <calculateOffset+0x19c>) 146:	2384      	movs	r3, #132	; 0x84 148:	5acb      	ldrh	r3, [r1, r3] 14a:	b2db      	uxtb	r3, r3 14c:	1ad3      	subs	r3, r2, r3 14e:	b2db      	uxtb	r3, r3 150:	b2da      	uxtb	r2, r3 152:	4b0f      	ldr	r3, [pc, #60]	; (190 <calculateOffset+0x190>) 154:	759a      	strb	r2, [r3, #22]	gyro.x = 0; 156:	4b0e      	ldr	r3, [pc, #56]	; (190 <calculateOffset+0x190>) 158:	2200      	movs	r2, #0 15a:	609a      	str	r2, [r3, #8]	gyro.y = 0; 15c:	4b0c      	ldr	r3, [pc, #48]	; (190 <calculateOffset+0x190>) 15e:	2200      	movs	r2, #0 160:	60da      	str	r2, [r3, #12]	gyro.z = 0; 162:	4b0b      	ldr	r3, [pc, #44]	; (190 <calculateOffset+0x190>) 164:	2200      	movs	r2, #0 166:	611a      	str	r2, [r3, #16]		Offset[0] = gyro.offsetX; 168:	4b09      	ldr	r3, [pc, #36]	; (190 <calculateOffset+0x190>) 16a:	7dda      	ldrb	r2, [r3, #23] 16c:	4b0d      	ldr	r3, [pc, #52]	; (1a4 <calculateOffset+0x1a4>) 16e:	701a      	strb	r2, [r3, #0]	Offset[1] = gyro.offsetY; 170:	4b07      	ldr	r3, [pc, #28]	; (190 <calculateOffset+0x190>) 172:	7e1a      	ldrb	r2, [r3, #24] 174:	4b0b      	ldr	r3, [pc, #44]	; (1a4 <calculateOffset+0x1a4>) 176:	705a      	strb	r2, [r3, #1]	Offset[2] = gyro.offsetZ; 178:	4b05      	ldr	r3, [pc, #20]	; (190 <calculateOffset+0x190>) 17a:	7e5a      	ldrb	r2, [r3, #25] 17c:	4b09      	ldr	r3, [pc, #36]	; (1a4 <calculateOffset+0x1a4>) 17e:	709a      	strb	r2, [r3, #2]	return ERR_OK; 180:	2300      	movs	r3, #0} 182:	1c18      	adds	r0, r3, #0 184:	46bd      	mov	sp, r7 186:	b002      	add	sp, #8 188:	bd80      	pop	{r7, pc} 18a:	46c0      	nop			; (mov r8, r8)	...			18c: R_ARM_ABS32	.bss.res			190: R_ARM_ABS32	.bss.gyro			194: R_ARM_ABS32	.bss.vX			198: R_ARM_ABS32	.bss.vY			19c: R_ARM_ABS32	.bss.vZ			1a0: R_ARM_ABS32	cmpfunc			1a4: R_ARM_ABS32	.bss.OffsetDisassembly of section .text.cmpfunc:00000000 <cmpfunc>:int16_t cmpfunc (const void * a, const void * b){   0:	b580      	push	{r7, lr}   2:	b082      	sub	sp, #8   4:	af00      	add	r7, sp, #0   6:	6078      	str	r0, [r7, #4]   8:	6039      	str	r1, [r7, #0]   return ( *(int16_t*)a - *(int16_t*)b );   a:	687b      	ldr	r3, [r7, #4]   c:	881b      	ldrh	r3, [r3, #0]   e:	b29a      	uxth	r2, r3  10:	683b      	ldr	r3, [r7, #0]  12:	881b      	ldrh	r3, [r3, #0]  14:	b29b      	uxth	r3, r3  16:	1ad3      	subs	r3, r2, r3  18:	b29b      	uxth	r3, r3  1a:	b29b      	uxth	r3, r3  1c:	b21b      	sxth	r3, r3}  1e:	1c18      	adds	r0, r3, #0  20:	46bd      	mov	sp, r7  22:	b002      	add	sp, #8  24:	bd80      	pop	{r7, pc}  26:	46c0      	nop			; (mov r8, r8)Disassembly of section .text.refreshMovingOffset:00000000 <refreshMovingOffset>:void refreshMovingOffset(char dim){   0:	b580      	push	{r7, lr}   2:	b082      	sub	sp, #8   4:	af00      	add	r7, sp, #0   6:	1c02      	adds	r2, r0, #0   8:	1dfb      	adds	r3, r7, #7   a:	701a      	strb	r2, [r3, #0]	static uint16 iX;	static uint16 iY;	static uint16 iZ;		switch(dim){   c:	1dfb      	adds	r3, r7, #7   e:	781b      	ldrb	r3, [r3, #0]  10:	3b58      	subs	r3, #88	; 0x58  12:	2b22      	cmp	r3, #34	; 0x22  14:	d900      	bls.n	18 <refreshMovingOffset+0x18>  16:	e0dc      	b.n	1d2 <refreshMovingOffset+0x1d2>  18:	009a      	lsls	r2, r3, #2  1a:	4b6f      	ldr	r3, [pc, #444]	; (1d8 <refreshMovingOffset+0x1d8>)  1c:	18d3      	adds	r3, r2, r3  1e:	681b      	ldr	r3, [r3, #0]  20:	469f      	mov	pc, r3	case 'x':;	case 'X':	vX[iX] = gyro.vX;  22:	4b6e      	ldr	r3, [pc, #440]	; (1dc <refreshMovingOffset+0x1dc>)  24:	881b      	ldrh	r3, [r3, #0]  26:	1c1a      	adds	r2, r3, #0  28:	4b6d      	ldr	r3, [pc, #436]	; (1e0 <refreshMovingOffset+0x1e0>)  2a:	8859      	ldrh	r1, [r3, #2]  2c:	4b6d      	ldr	r3, [pc, #436]	; (1e4 <refreshMovingOffset+0x1e4>)  2e:	0052      	lsls	r2, r2, #1  30:	52d1      	strh	r1, [r2, r3]				if(++iX  >= NBROFFSET){  32:	4b6a      	ldr	r3, [pc, #424]	; (1dc <refreshMovingOffset+0x1dc>)  34:	881b      	ldrh	r3, [r3, #0]  36:	3301      	adds	r3, #1  38:	b29a      	uxth	r2, r3  3a:	4b68      	ldr	r3, [pc, #416]	; (1dc <refreshMovingOffset+0x1dc>)  3c:	801a      	strh	r2, [r3, #0]  3e:	4b67      	ldr	r3, [pc, #412]	; (1dc <refreshMovingOffset+0x1dc>)  40:	881b      	ldrh	r3, [r3, #0]  42:	2bc7      	cmp	r3, #199	; 0xc7  44:	d800      	bhi.n	48 <refreshMovingOffset+0x48>  46:	e0bf      	b.n	1c8 <refreshMovingOffset+0x1c8>					iX = 0;  48:	4b64      	ldr	r3, [pc, #400]	; (1dc <refreshMovingOffset+0x1dc>)  4a:	2200      	movs	r2, #0  4c:	801a      	strh	r2, [r3, #0]					qsort(&vX[0], NBROFFSET, sizeof(int16_t), (_compare_function) cmpfunc);  4e:	4a65      	ldr	r2, [pc, #404]	; (1e4 <refreshMovingOffset+0x1e4>)  50:	4b65      	ldr	r3, [pc, #404]	; (1e8 <refreshMovingOffset+0x1e8>)  52:	1c10      	adds	r0, r2, #0  54:	21c8      	movs	r1, #200	; 0xc8  56:	2202      	movs	r2, #2  58:	f7ff fffe 	bl	0 <qsort>			58: R_ARM_THM_CALL	qsort					if((gyro.offsetX+vX[NBROFFSET/2])<(Offset[0]+MAXOFFSET) && (gyro.offsetX+vX[NBROFFSET/2])>(Offset[0]-MAXOFFSET)){  5c:	4b60      	ldr	r3, [pc, #384]	; (1e0 <refreshMovingOffset+0x1e0>)  5e:	7ddb      	ldrb	r3, [r3, #23]  60:	b25a      	sxtb	r2, r3  62:	4960      	ldr	r1, [pc, #384]	; (1e4 <refreshMovingOffset+0x1e4>)  64:	23c8      	movs	r3, #200	; 0xc8  66:	5acb      	ldrh	r3, [r1, r3]  68:	b21b      	sxth	r3, r3  6a:	18d2      	adds	r2, r2, r3  6c:	4b5f      	ldr	r3, [pc, #380]	; (1ec <refreshMovingOffset+0x1ec>)  6e:	781b      	ldrb	r3, [r3, #0]  70:	b25b      	sxtb	r3, r3  72:	3314      	adds	r3, #20  74:	429a      	cmp	r2, r3  76:	db00      	blt.n	7a <refreshMovingOffset+0x7a>  78:	e0a6      	b.n	1c8 <refreshMovingOffset+0x1c8>  7a:	4b59      	ldr	r3, [pc, #356]	; (1e0 <refreshMovingOffset+0x1e0>)  7c:	7ddb      	ldrb	r3, [r3, #23]  7e:	b25a      	sxtb	r2, r3  80:	4958      	ldr	r1, [pc, #352]	; (1e4 <refreshMovingOffset+0x1e4>)  82:	23c8      	movs	r3, #200	; 0xc8  84:	5acb      	ldrh	r3, [r1, r3]  86:	b21b      	sxth	r3, r3  88:	18d2      	adds	r2, r2, r3  8a:	4b58      	ldr	r3, [pc, #352]	; (1ec <refreshMovingOffset+0x1ec>)  8c:	781b      	ldrb	r3, [r3, #0]  8e:	b25b      	sxtb	r3, r3  90:	3b14      	subs	r3, #20  92:	429a      	cmp	r2, r3  94:	dc00      	bgt.n	98 <refreshMovingOffset+0x98>  96:	e097      	b.n	1c8 <refreshMovingOffset+0x1c8>						gyro.offsetX += vX[NBROFFSET/2];  98:	4b51      	ldr	r3, [pc, #324]	; (1e0 <refreshMovingOffset+0x1e0>)  9a:	7ddb      	ldrb	r3, [r3, #23]  9c:	b2da      	uxtb	r2, r3  9e:	4951      	ldr	r1, [pc, #324]	; (1e4 <refreshMovingOffset+0x1e4>)  a0:	23c8      	movs	r3, #200	; 0xc8  a2:	5acb      	ldrh	r3, [r1, r3]  a4:	b2db      	uxtb	r3, r3  a6:	18d3      	adds	r3, r2, r3  a8:	b2db      	uxtb	r3, r3  aa:	b2da      	uxtb	r2, r3  ac:	4b4c      	ldr	r3, [pc, #304]	; (1e0 <refreshMovingOffset+0x1e0>)  ae:	75da      	strb	r2, [r3, #23]					}				}	break;  b0:	e08a      	b.n	1c8 <refreshMovingOffset+0x1c8>	case 'y':;	case 'Y':	vY[iY] = gyro.vY;  b2:	4b4f      	ldr	r3, [pc, #316]	; (1f0 <refreshMovingOffset+0x1f0>)  b4:	881b      	ldrh	r3, [r3, #0]  b6:	1c1a      	adds	r2, r3, #0  b8:	4b49      	ldr	r3, [pc, #292]	; (1e0 <refreshMovingOffset+0x1e0>)  ba:	8899      	ldrh	r1, [r3, #4]  bc:	4b4d      	ldr	r3, [pc, #308]	; (1f4 <refreshMovingOffset+0x1f4>)  be:	0052      	lsls	r2, r2, #1  c0:	52d1      	strh	r1, [r2, r3]				if(++iY  >= NBROFFSET){  c2:	4b4b      	ldr	r3, [pc, #300]	; (1f0 <refreshMovingOffset+0x1f0>)  c4:	881b      	ldrh	r3, [r3, #0]  c6:	3301      	adds	r3, #1  c8:	b29a      	uxth	r2, r3  ca:	4b49      	ldr	r3, [pc, #292]	; (1f0 <refreshMovingOffset+0x1f0>)  cc:	801a      	strh	r2, [r3, #0]  ce:	4b48      	ldr	r3, [pc, #288]	; (1f0 <refreshMovingOffset+0x1f0>)  d0:	881b      	ldrh	r3, [r3, #0]  d2:	2bc7      	cmp	r3, #199	; 0xc7  d4:	d800      	bhi.n	d8 <refreshMovingOffset+0xd8>  d6:	e079      	b.n	1cc <refreshMovingOffset+0x1cc>					iY = 0;  d8:	4b45      	ldr	r3, [pc, #276]	; (1f0 <refreshMovingOffset+0x1f0>)  da:	2200      	movs	r2, #0  dc:	801a      	strh	r2, [r3, #0]					qsort(&vY[0], NBROFFSET, sizeof(int16_t), (_compare_function) cmpfunc);  de:	4a45      	ldr	r2, [pc, #276]	; (1f4 <refreshMovingOffset+0x1f4>)  e0:	4b41      	ldr	r3, [pc, #260]	; (1e8 <refreshMovingOffset+0x1e8>)  e2:	1c10      	adds	r0, r2, #0  e4:	21c8      	movs	r1, #200	; 0xc8  e6:	2202      	movs	r2, #2  e8:	f7ff fffe 	bl	0 <qsort>			e8: R_ARM_THM_CALL	qsort					if((gyro.offsetY+vY[NBROFFSET/2])<(Offset[1]+MAXOFFSET) && (gyro.offsetY+vY[NBROFFSET/2])>(Offset[1]-MAXOFFSET)){  ec:	4b3c      	ldr	r3, [pc, #240]	; (1e0 <refreshMovingOffset+0x1e0>)  ee:	7e1b      	ldrb	r3, [r3, #24]  f0:	b25a      	sxtb	r2, r3  f2:	4940      	ldr	r1, [pc, #256]	; (1f4 <refreshMovingOffset+0x1f4>)  f4:	23c8      	movs	r3, #200	; 0xc8  f6:	5acb      	ldrh	r3, [r1, r3]  f8:	b21b      	sxth	r3, r3  fa:	18d2      	adds	r2, r2, r3  fc:	4b3b      	ldr	r3, [pc, #236]	; (1ec <refreshMovingOffset+0x1ec>)  fe:	785b      	ldrb	r3, [r3, #1] 100:	b25b      	sxtb	r3, r3 102:	3314      	adds	r3, #20 104:	429a      	cmp	r2, r3 106:	da61      	bge.n	1cc <refreshMovingOffset+0x1cc> 108:	4b35      	ldr	r3, [pc, #212]	; (1e0 <refreshMovingOffset+0x1e0>) 10a:	7e1b      	ldrb	r3, [r3, #24] 10c:	b25a      	sxtb	r2, r3 10e:	4939      	ldr	r1, [pc, #228]	; (1f4 <refreshMovingOffset+0x1f4>) 110:	23c8      	movs	r3, #200	; 0xc8 112:	5acb      	ldrh	r3, [r1, r3] 114:	b21b      	sxth	r3, r3 116:	18d2      	adds	r2, r2, r3 118:	4b34      	ldr	r3, [pc, #208]	; (1ec <refreshMovingOffset+0x1ec>) 11a:	785b      	ldrb	r3, [r3, #1] 11c:	b25b      	sxtb	r3, r3 11e:	3b14      	subs	r3, #20 120:	429a      	cmp	r2, r3 122:	dd53      	ble.n	1cc <refreshMovingOffset+0x1cc>						gyro.offsetY += vY[NBROFFSET/2]; 124:	4b2e      	ldr	r3, [pc, #184]	; (1e0 <refreshMovingOffset+0x1e0>) 126:	7e1b      	ldrb	r3, [r3, #24] 128:	b2da      	uxtb	r2, r3 12a:	4932      	ldr	r1, [pc, #200]	; (1f4 <refreshMovingOffset+0x1f4>) 12c:	23c8      	movs	r3, #200	; 0xc8 12e:	5acb      	ldrh	r3, [r1, r3] 130:	b2db      	uxtb	r3, r3 132:	18d3      	adds	r3, r2, r3 134:	b2db      	uxtb	r3, r3 136:	b2da      	uxtb	r2, r3 138:	4b29      	ldr	r3, [pc, #164]	; (1e0 <refreshMovingOffset+0x1e0>) 13a:	761a      	strb	r2, [r3, #24]					}				}	break; 13c:	e046      	b.n	1cc <refreshMovingOffset+0x1cc>	case 'z':;	case 'Z': 	vZ[iZ] = gyro.vZ; 13e:	4b2e      	ldr	r3, [pc, #184]	; (1f8 <refreshMovingOffset+0x1f8>) 140:	881b      	ldrh	r3, [r3, #0] 142:	1c1a      	adds	r2, r3, #0 144:	4b26      	ldr	r3, [pc, #152]	; (1e0 <refreshMovingOffset+0x1e0>) 146:	88d9      	ldrh	r1, [r3, #6] 148:	4b2c      	ldr	r3, [pc, #176]	; (1fc <refreshMovingOffset+0x1fc>) 14a:	0052      	lsls	r2, r2, #1 14c:	52d1      	strh	r1, [r2, r3]				if(++iZ  >= NBROFFSET){ 14e:	4b2a      	ldr	r3, [pc, #168]	; (1f8 <refreshMovingOffset+0x1f8>) 150:	881b      	ldrh	r3, [r3, #0] 152:	3301      	adds	r3, #1 154:	b29a      	uxth	r2, r3 156:	4b28      	ldr	r3, [pc, #160]	; (1f8 <refreshMovingOffset+0x1f8>) 158:	801a      	strh	r2, [r3, #0] 15a:	4b27      	ldr	r3, [pc, #156]	; (1f8 <refreshMovingOffset+0x1f8>) 15c:	881b      	ldrh	r3, [r3, #0] 15e:	2bc7      	cmp	r3, #199	; 0xc7 160:	d936      	bls.n	1d0 <refreshMovingOffset+0x1d0>					iZ = 0; 162:	4b25      	ldr	r3, [pc, #148]	; (1f8 <refreshMovingOffset+0x1f8>) 164:	2200      	movs	r2, #0 166:	801a      	strh	r2, [r3, #0]					qsort(&vZ[0], NBROFFSET, sizeof(int16_t), (_compare_function) cmpfunc); 168:	4a24      	ldr	r2, [pc, #144]	; (1fc <refreshMovingOffset+0x1fc>) 16a:	4b1f      	ldr	r3, [pc, #124]	; (1e8 <refreshMovingOffset+0x1e8>) 16c:	1c10      	adds	r0, r2, #0 16e:	21c8      	movs	r1, #200	; 0xc8 170:	2202      	movs	r2, #2 172:	f7ff fffe 	bl	0 <qsort>			172: R_ARM_THM_CALL	qsort					if((gyro.offsetZ+vZ[NBROFFSET/2])<(Offset[2]+MAXOFFSET) && (gyro.offsetZ+vZ[NBROFFSET/2])>(Offset[2]-MAXOFFSET)){ 176:	4b1a      	ldr	r3, [pc, #104]	; (1e0 <refreshMovingOffset+0x1e0>) 178:	7e5b      	ldrb	r3, [r3, #25] 17a:	b25a      	sxtb	r2, r3 17c:	491f      	ldr	r1, [pc, #124]	; (1fc <refreshMovingOffset+0x1fc>) 17e:	23c8      	movs	r3, #200	; 0xc8 180:	5acb      	ldrh	r3, [r1, r3] 182:	b21b      	sxth	r3, r3 184:	18d2      	adds	r2, r2, r3 186:	4b19      	ldr	r3, [pc, #100]	; (1ec <refreshMovingOffset+0x1ec>) 188:	789b      	ldrb	r3, [r3, #2] 18a:	b25b      	sxtb	r3, r3 18c:	3314      	adds	r3, #20 18e:	429a      	cmp	r2, r3 190:	da1e      	bge.n	1d0 <refreshMovingOffset+0x1d0> 192:	4b13      	ldr	r3, [pc, #76]	; (1e0 <refreshMovingOffset+0x1e0>) 194:	7e5b      	ldrb	r3, [r3, #25] 196:	b25a      	sxtb	r2, r3 198:	4918      	ldr	r1, [pc, #96]	; (1fc <refreshMovingOffset+0x1fc>) 19a:	23c8      	movs	r3, #200	; 0xc8 19c:	5acb      	ldrh	r3, [r1, r3] 19e:	b21b      	sxth	r3, r3 1a0:	18d2      	adds	r2, r2, r3 1a2:	4b12      	ldr	r3, [pc, #72]	; (1ec <refreshMovingOffset+0x1ec>) 1a4:	789b      	ldrb	r3, [r3, #2] 1a6:	b25b      	sxtb	r3, r3 1a8:	3b14      	subs	r3, #20 1aa:	429a      	cmp	r2, r3 1ac:	dd10      	ble.n	1d0 <refreshMovingOffset+0x1d0>						gyro.offsetZ += vZ[NBROFFSET/2]; 1ae:	4b0c      	ldr	r3, [pc, #48]	; (1e0 <refreshMovingOffset+0x1e0>) 1b0:	7e5b      	ldrb	r3, [r3, #25] 1b2:	b2da      	uxtb	r2, r3 1b4:	4911      	ldr	r1, [pc, #68]	; (1fc <refreshMovingOffset+0x1fc>) 1b6:	23c8      	movs	r3, #200	; 0xc8 1b8:	5acb      	ldrh	r3, [r1, r3] 1ba:	b2db      	uxtb	r3, r3 1bc:	18d3      	adds	r3, r2, r3 1be:	b2db      	uxtb	r3, r3 1c0:	b2da      	uxtb	r2, r3 1c2:	4b07      	ldr	r3, [pc, #28]	; (1e0 <refreshMovingOffset+0x1e0>) 1c4:	765a      	strb	r2, [r3, #25]					}				}	break; 1c6:	e003      	b.n	1d0 <refreshMovingOffset+0x1d0>					qsort(&vX[0], NBROFFSET, sizeof(int16_t), (_compare_function) cmpfunc);					if((gyro.offsetX+vX[NBROFFSET/2])<(Offset[0]+MAXOFFSET) && (gyro.offsetX+vX[NBROFFSET/2])>(Offset[0]-MAXOFFSET)){						gyro.offsetX += vX[NBROFFSET/2];					}				}	break; 1c8:	46c0      	nop			; (mov r8, r8) 1ca:	e002      	b.n	1d2 <refreshMovingOffset+0x1d2>					qsort(&vY[0], NBROFFSET, sizeof(int16_t), (_compare_function) cmpfunc);					if((gyro.offsetY+vY[NBROFFSET/2])<(Offset[1]+MAXOFFSET) && (gyro.offsetY+vY[NBROFFSET/2])>(Offset[1]-MAXOFFSET)){						gyro.offsetY += vY[NBROFFSET/2];					}				}	break; 1cc:	46c0      	nop			; (mov r8, r8) 1ce:	e000      	b.n	1d2 <refreshMovingOffset+0x1d2>					qsort(&vZ[0], NBROFFSET, sizeof(int16_t), (_compare_function) cmpfunc);					if((gyro.offsetZ+vZ[NBROFFSET/2])<(Offset[2]+MAXOFFSET) && (gyro.offsetZ+vZ[NBROFFSET/2])>(Offset[2]-MAXOFFSET)){						gyro.offsetZ += vZ[NBROFFSET/2];					}				}	break; 1d0:	46c0      	nop			; (mov r8, r8)	default: ; // error	}		} 1d2:	46bd      	mov	sp, r7 1d4:	b002      	add	sp, #8 1d6:	bd80      	pop	{r7, pc}	...			1d8: R_ARM_ABS32	.rodata.refreshMovingOffset			1dc: R_ARM_ABS32	.bss.iX.7790			1e0: R_ARM_ABS32	.bss.gyro			1e4: R_ARM_ABS32	.bss.vX			1e8: R_ARM_ABS32	cmpfunc			1ec: R_ARM_ABS32	.bss.Offset			1f0: R_ARM_ABS32	.bss.iY.7791			1f4: R_ARM_ABS32	.bss.vY			1f8: R_ARM_ABS32	.bss.iZ.7792			1fc: R_ARM_ABS32	.bss.vZDisassembly of section .text.L3GSetAngel:00000000 <L3GSetAngel>:void L3GSetAngel(char dim, int16_t value){   0:	b580      	push	{r7, lr}   2:	b082      	sub	sp, #8   4:	af00      	add	r7, sp, #0   6:	1c0a      	adds	r2, r1, #0   8:	1dfb      	adds	r3, r7, #7   a:	1c01      	adds	r1, r0, #0   c:	7019      	strb	r1, [r3, #0]   e:	1d3b      	adds	r3, r7, #4  10:	801a      	strh	r2, [r3, #0]	switch(dim){  12:	1dfb      	adds	r3, r7, #7  14:	781b      	ldrb	r3, [r3, #0]  16:	3b58      	subs	r3, #88	; 0x58  18:	2b22      	cmp	r3, #34	; 0x22  1a:	d816      	bhi.n	4a <L3GSetAngel+0x4a>  1c:	009a      	lsls	r2, r3, #2  1e:	4b0d      	ldr	r3, [pc, #52]	; (54 <L3GSetAngel+0x54>)  20:	18d3      	adds	r3, r2, r3  22:	681b      	ldr	r3, [r3, #0]  24:	469f      	mov	pc, r3	case 'X': ;	case 'x': gyro.x = (int32_t)value;  26:	1d3b      	adds	r3, r7, #4  28:	2100      	movs	r1, #0  2a:	5e5a      	ldrsh	r2, [r3, r1]  2c:	4b0a      	ldr	r3, [pc, #40]	; (58 <L3GSetAngel+0x58>)  2e:	609a      	str	r2, [r3, #8]	break;  30:	e00c      	b.n	4c <L3GSetAngel+0x4c>	case 'Y': ;	case 'y': gyro.y = (int32_t)value;  32:	1d3b      	adds	r3, r7, #4  34:	2100      	movs	r1, #0  36:	5e5a      	ldrsh	r2, [r3, r1]  38:	4b07      	ldr	r3, [pc, #28]	; (58 <L3GSetAngel+0x58>)  3a:	60da      	str	r2, [r3, #12]	break;  3c:	e006      	b.n	4c <L3GSetAngel+0x4c>	case 'Z': ;	case 'z': gyro.z = (int32_t)value;  3e:	1d3b      	adds	r3, r7, #4  40:	2100      	movs	r1, #0  42:	5e5a      	ldrsh	r2, [r3, r1]  44:	4b04      	ldr	r3, [pc, #16]	; (58 <L3GSetAngel+0x58>)  46:	611a      	str	r2, [r3, #16]	break;  48:	e000      	b.n	4c <L3GSetAngel+0x4c>	default: ; //error;	break;  4a:	46c0      	nop			; (mov r8, r8)	}}  4c:	46bd      	mov	sp, r7  4e:	b002      	add	sp, #8  50:	bd80      	pop	{r7, pc}  52:	46c0      	nop			; (mov r8, r8)	...			54: R_ARM_ABS32	.rodata.L3GSetAngel			58: R_ARM_ABS32	.bss.gyroDisassembly of section .text.combineAccel:00000000 <combineAccel>:#if MMA1void combineAccel(void){   0:	b5f0      	push	{r4, r5, r6, r7, lr}   2:	b085      	sub	sp, #20   4:	af00      	add	r7, sp, #0	   float xyzAccel[3];	   float pitch;	   static uint8_t accelCounter;	  	  if(accelCounter >=32){   6:	4b84      	ldr	r3, [pc, #528]	; (218 <combineAccel+0x218>)   8:	781b      	ldrb	r3, [r3, #0]   a:	2b1f      	cmp	r3, #31   c:	d800      	bhi.n	10 <combineAccel+0x10>   e:	e0e7      	b.n	1e0 <combineAccel+0x1e0>		  xyzAccel[1] = (float)MMA1_GetXmg()*PI/1000;  10:	f7ff fffe 	bl	0 <MMA1_GetXmg>			10: R_ARM_THM_CALL	MMA1_GetXmg  14:	1c03      	adds	r3, r0, #0  16:	1c18      	adds	r0, r3, #0  18:	f7ff fffe 	bl	0 <__aeabi_i2f>			18: R_ARM_THM_CALL	__aeabi_i2f  1c:	1c03      	adds	r3, r0, #0  1e:	1c18      	adds	r0, r3, #0  20:	f7ff fffe 	bl	0 <__aeabi_f2d>			20: R_ARM_THM_CALL	__aeabi_f2d  24:	1c03      	adds	r3, r0, #0  26:	1c0c      	adds	r4, r1, #0  28:	1c18      	adds	r0, r3, #0  2a:	1c21      	adds	r1, r4, #0  2c:	4b73      	ldr	r3, [pc, #460]	; (1fc <combineAccel+0x1fc>)  2e:	4a72      	ldr	r2, [pc, #456]	; (1f8 <combineAccel+0x1f8>)  30:	f7ff fffe 	bl	0 <__aeabi_dmul>			30: R_ARM_THM_CALL	__aeabi_dmul  34:	1c03      	adds	r3, r0, #0  36:	1c0c      	adds	r4, r1, #0  38:	1c18      	adds	r0, r3, #0  3a:	1c21      	adds	r1, r4, #0  3c:	4a70      	ldr	r2, [pc, #448]	; (200 <combineAccel+0x200>)  3e:	4b71      	ldr	r3, [pc, #452]	; (204 <combineAccel+0x204>)  40:	f7ff fffe 	bl	0 <__aeabi_ddiv>			40: R_ARM_THM_CALL	__aeabi_ddiv  44:	1c03      	adds	r3, r0, #0  46:	1c0c      	adds	r4, r1, #0  48:	1c18      	adds	r0, r3, #0  4a:	1c21      	adds	r1, r4, #0  4c:	f7ff fffe 	bl	0 <__aeabi_d2f>			4c: R_ARM_THM_CALL	__aeabi_d2f  50:	1c02      	adds	r2, r0, #0  52:	1c3b      	adds	r3, r7, #0  54:	605a      	str	r2, [r3, #4]		  xyzAccel[2] = (float)MMA1_GetYmg()*PI/1000;  56:	f7ff fffe 	bl	0 <MMA1_GetYmg>			56: R_ARM_THM_CALL	MMA1_GetYmg  5a:	1c03      	adds	r3, r0, #0  5c:	1c18      	adds	r0, r3, #0  5e:	f7ff fffe 	bl	0 <__aeabi_i2f>			5e: R_ARM_THM_CALL	__aeabi_i2f  62:	1c03      	adds	r3, r0, #0  64:	1c18      	adds	r0, r3, #0  66:	f7ff fffe 	bl	0 <__aeabi_f2d>			66: R_ARM_THM_CALL	__aeabi_f2d  6a:	1c03      	adds	r3, r0, #0  6c:	1c0c      	adds	r4, r1, #0  6e:	1c18      	adds	r0, r3, #0  70:	1c21      	adds	r1, r4, #0  72:	4b62      	ldr	r3, [pc, #392]	; (1fc <combineAccel+0x1fc>)  74:	4a60      	ldr	r2, [pc, #384]	; (1f8 <combineAccel+0x1f8>)  76:	f7ff fffe 	bl	0 <__aeabi_dmul>			76: R_ARM_THM_CALL	__aeabi_dmul  7a:	1c03      	adds	r3, r0, #0  7c:	1c0c      	adds	r4, r1, #0  7e:	1c18      	adds	r0, r3, #0  80:	1c21      	adds	r1, r4, #0  82:	4a5f      	ldr	r2, [pc, #380]	; (200 <combineAccel+0x200>)  84:	4b5f      	ldr	r3, [pc, #380]	; (204 <combineAccel+0x204>)  86:	f7ff fffe 	bl	0 <__aeabi_ddiv>			86: R_ARM_THM_CALL	__aeabi_ddiv  8a:	1c03      	adds	r3, r0, #0  8c:	1c0c      	adds	r4, r1, #0  8e:	1c18      	adds	r0, r3, #0  90:	1c21      	adds	r1, r4, #0  92:	f7ff fffe 	bl	0 <__aeabi_d2f>			92: R_ARM_THM_CALL	__aeabi_d2f  96:	1c02      	adds	r2, r0, #0  98:	1c3b      	adds	r3, r7, #0  9a:	609a      	str	r2, [r3, #8]		  xyzAccel[3] = (float)MMA1_GetZmg()*PI/1000;  9c:	f7ff fffe 	bl	0 <MMA1_GetZmg>			9c: R_ARM_THM_CALL	MMA1_GetZmg  a0:	1c03      	adds	r3, r0, #0  a2:	1c18      	adds	r0, r3, #0  a4:	f7ff fffe 	bl	0 <__aeabi_i2f>			a4: R_ARM_THM_CALL	__aeabi_i2f  a8:	1c03      	adds	r3, r0, #0  aa:	1c18      	adds	r0, r3, #0  ac:	f7ff fffe 	bl	0 <__aeabi_f2d>			ac: R_ARM_THM_CALL	__aeabi_f2d  b0:	1c03      	adds	r3, r0, #0  b2:	1c0c      	adds	r4, r1, #0  b4:	1c18      	adds	r0, r3, #0  b6:	1c21      	adds	r1, r4, #0  b8:	4b50      	ldr	r3, [pc, #320]	; (1fc <combineAccel+0x1fc>)  ba:	4a4f      	ldr	r2, [pc, #316]	; (1f8 <combineAccel+0x1f8>)  bc:	f7ff fffe 	bl	0 <__aeabi_dmul>			bc: R_ARM_THM_CALL	__aeabi_dmul  c0:	1c03      	adds	r3, r0, #0  c2:	1c0c      	adds	r4, r1, #0  c4:	1c18      	adds	r0, r3, #0  c6:	1c21      	adds	r1, r4, #0  c8:	4a4d      	ldr	r2, [pc, #308]	; (200 <combineAccel+0x200>)  ca:	4b4e      	ldr	r3, [pc, #312]	; (204 <combineAccel+0x204>)  cc:	f7ff fffe 	bl	0 <__aeabi_ddiv>			cc: R_ARM_THM_CALL	__aeabi_ddiv  d0:	1c03      	adds	r3, r0, #0  d2:	1c0c      	adds	r4, r1, #0  d4:	1c18      	adds	r0, r3, #0  d6:	1c21      	adds	r1, r4, #0  d8:	f7ff fffe 	bl	0 <__aeabi_d2f>			d8: R_ARM_THM_CALL	__aeabi_d2f  dc:	1c02      	adds	r2, r0, #0  de:	1c3b      	adds	r3, r7, #0  e0:	60da      	str	r2, [r3, #12]		  		  //calc pitch in degree		  pitch = atan(xyzAccel[1]/sqrt(xyzAccel[2]*xyzAccel[2]+xyzAccel[3]*xyzAccel[3]))*180/PI;   e2:	1c3b      	adds	r3, r7, #0  e4:	685b      	ldr	r3, [r3, #4]  e6:	1c18      	adds	r0, r3, #0  e8:	f7ff fffe 	bl	0 <__aeabi_f2d>			e8: R_ARM_THM_CALL	__aeabi_f2d  ec:	1c05      	adds	r5, r0, #0  ee:	1c0e      	adds	r6, r1, #0  f0:	1c3b      	adds	r3, r7, #0  f2:	689a      	ldr	r2, [r3, #8]  f4:	1c3b      	adds	r3, r7, #0  f6:	689b      	ldr	r3, [r3, #8]  f8:	1c10      	adds	r0, r2, #0  fa:	1c19      	adds	r1, r3, #0  fc:	f7ff fffe 	bl	0 <__aeabi_fmul>			fc: R_ARM_THM_CALL	__aeabi_fmul 100:	1c03      	adds	r3, r0, #0 102:	1c1c      	adds	r4, r3, #0 104:	1c3b      	adds	r3, r7, #0 106:	68da      	ldr	r2, [r3, #12] 108:	1c3b      	adds	r3, r7, #0 10a:	68db      	ldr	r3, [r3, #12] 10c:	1c10      	adds	r0, r2, #0 10e:	1c19      	adds	r1, r3, #0 110:	f7ff fffe 	bl	0 <__aeabi_fmul>			110: R_ARM_THM_CALL	__aeabi_fmul 114:	1c03      	adds	r3, r0, #0 116:	1c20      	adds	r0, r4, #0 118:	1c19      	adds	r1, r3, #0 11a:	f7ff fffe 	bl	0 <__aeabi_fadd>			11a: R_ARM_THM_CALL	__aeabi_fadd 11e:	1c03      	adds	r3, r0, #0 120:	1c18      	adds	r0, r3, #0 122:	f7ff fffe 	bl	0 <__aeabi_f2d>			122: R_ARM_THM_CALL	__aeabi_f2d 126:	1c03      	adds	r3, r0, #0 128:	1c0c      	adds	r4, r1, #0 12a:	1c18      	adds	r0, r3, #0 12c:	1c21      	adds	r1, r4, #0 12e:	f7ff fffe 	bl	0 <sqrt>			12e: R_ARM_THM_CALL	sqrt 132:	1c03      	adds	r3, r0, #0 134:	1c0c      	adds	r4, r1, #0 136:	1c28      	adds	r0, r5, #0 138:	1c31      	adds	r1, r6, #0 13a:	1c1a      	adds	r2, r3, #0 13c:	1c23      	adds	r3, r4, #0 13e:	f7ff fffe 	bl	0 <__aeabi_ddiv>			13e: R_ARM_THM_CALL	__aeabi_ddiv 142:	1c03      	adds	r3, r0, #0 144:	1c0c      	adds	r4, r1, #0 146:	1c18      	adds	r0, r3, #0 148:	1c21      	adds	r1, r4, #0 14a:	f7ff fffe 	bl	0 <atan>			14a: R_ARM_THM_CALL	atan 14e:	1c03      	adds	r3, r0, #0 150:	1c0c      	adds	r4, r1, #0 152:	1c18      	adds	r0, r3, #0 154:	1c21      	adds	r1, r4, #0 156:	4a2c      	ldr	r2, [pc, #176]	; (208 <combineAccel+0x208>) 158:	4b2c      	ldr	r3, [pc, #176]	; (20c <combineAccel+0x20c>) 15a:	f7ff fffe 	bl	0 <__aeabi_dmul>			15a: R_ARM_THM_CALL	__aeabi_dmul 15e:	1c03      	adds	r3, r0, #0 160:	1c0c      	adds	r4, r1, #0 162:	1c18      	adds	r0, r3, #0 164:	1c21      	adds	r1, r4, #0 166:	4b25      	ldr	r3, [pc, #148]	; (1fc <combineAccel+0x1fc>) 168:	4a23      	ldr	r2, [pc, #140]	; (1f8 <combineAccel+0x1f8>) 16a:	f7ff fffe 	bl	0 <__aeabi_ddiv>			16a: R_ARM_THM_CALL	__aeabi_ddiv 16e:	1c03      	adds	r3, r0, #0 170:	1c0c      	adds	r4, r1, #0 172:	1c18      	adds	r0, r3, #0 174:	1c21      	adds	r1, r4, #0 176:	f7ff fffe 	bl	0 <__aeabi_d2f>			176: R_ARM_THM_CALL	__aeabi_d2f 17a:	1c03      	adds	r3, r0, #0 17c:	60fb      	str	r3, [r7, #12]		  		  // set new pitch to register		  gyro.z = gyro.z*0.95 + (int32_t)(pitch*50); 		// pitch*50 => pitch*1000*0.05; 17e:	4b27      	ldr	r3, [pc, #156]	; (21c <combineAccel+0x21c>) 180:	691b      	ldr	r3, [r3, #16] 182:	1c18      	adds	r0, r3, #0 184:	f7ff fffe 	bl	0 <__aeabi_i2d>			184: R_ARM_THM_CALL	__aeabi_i2d 188:	1c03      	adds	r3, r0, #0 18a:	1c0c      	adds	r4, r1, #0 18c:	1c18      	adds	r0, r3, #0 18e:	1c21      	adds	r1, r4, #0 190:	4a1f      	ldr	r2, [pc, #124]	; (210 <combineAccel+0x210>) 192:	4b20      	ldr	r3, [pc, #128]	; (214 <combineAccel+0x214>) 194:	f7ff fffe 	bl	0 <__aeabi_dmul>			194: R_ARM_THM_CALL	__aeabi_dmul 198:	1c03      	adds	r3, r0, #0 19a:	1c0c      	adds	r4, r1, #0 19c:	1c1d      	adds	r5, r3, #0 19e:	1c26      	adds	r6, r4, #0 1a0:	68f8      	ldr	r0, [r7, #12] 1a2:	491f      	ldr	r1, [pc, #124]	; (220 <combineAccel+0x220>) 1a4:	f7ff fffe 	bl	0 <__aeabi_fmul>			1a4: R_ARM_THM_CALL	__aeabi_fmul 1a8:	1c03      	adds	r3, r0, #0 1aa:	1c18      	adds	r0, r3, #0 1ac:	f7ff fffe 	bl	0 <__aeabi_f2iz>			1ac: R_ARM_THM_CALL	__aeabi_f2iz 1b0:	1c03      	adds	r3, r0, #0 1b2:	1c18      	adds	r0, r3, #0 1b4:	f7ff fffe 	bl	0 <__aeabi_i2d>			1b4: R_ARM_THM_CALL	__aeabi_i2d 1b8:	1c03      	adds	r3, r0, #0 1ba:	1c0c      	adds	r4, r1, #0 1bc:	1c28      	adds	r0, r5, #0 1be:	1c31      	adds	r1, r6, #0 1c0:	1c1a      	adds	r2, r3, #0 1c2:	1c23      	adds	r3, r4, #0 1c4:	f7ff fffe 	bl	0 <__aeabi_dadd>			1c4: R_ARM_THM_CALL	__aeabi_dadd 1c8:	1c03      	adds	r3, r0, #0 1ca:	1c0c      	adds	r4, r1, #0 1cc:	1c18      	adds	r0, r3, #0 1ce:	1c21      	adds	r1, r4, #0 1d0:	f7ff fffe 	bl	0 <__aeabi_d2iz>			1d0: R_ARM_THM_CALL	__aeabi_d2iz 1d4:	1c02      	adds	r2, r0, #0 1d6:	4b11      	ldr	r3, [pc, #68]	; (21c <combineAccel+0x21c>) 1d8:	611a      	str	r2, [r3, #16]		  accelCounter = 0; 1da:	4b0f      	ldr	r3, [pc, #60]	; (218 <combineAccel+0x218>) 1dc:	2200      	movs	r2, #0 1de:	701a      	strb	r2, [r3, #0]	  }	  accelCounter++; 1e0:	4b0d      	ldr	r3, [pc, #52]	; (218 <combineAccel+0x218>) 1e2:	781b      	ldrb	r3, [r3, #0] 1e4:	3301      	adds	r3, #1 1e6:	b2da      	uxtb	r2, r3 1e8:	4b0b      	ldr	r3, [pc, #44]	; (218 <combineAccel+0x218>) 1ea:	701a      	strb	r2, [r3, #0]} 1ec:	46bd      	mov	sp, r7 1ee:	b005      	add	sp, #20 1f0:	bdf0      	pop	{r4, r5, r6, r7, pc} 1f2:	46c0      	nop			; (mov r8, r8) 1f4:	46c0      	nop			; (mov r8, r8) 1f6:	46c0      	nop			; (mov r8, r8) 1f8:	53c8d4f1 	.word	0x53c8d4f1 1fc:	400921fb 	.word	0x400921fb 200:	00000000 	.word	0x00000000 204:	408f4000 	.word	0x408f4000 208:	00000000 	.word	0x00000000 20c:	40668000 	.word	0x40668000 210:	66666666 	.word	0x66666666 214:	3fee6666 	.word	0x3fee6666	...			218: R_ARM_ABS32	.bss.accelCounter.7818			21c: R_ARM_ABS32	.bss.gyro 220:	42480000 	.word	0x42480000 224:	46c0      	nop			; (mov r8, r8) 226:	46c0      	nop			; (mov r8, r8)